--- src/ConnectionService/src/WebCacheControl.cpp.O	2013-12-23 21:22:11.000000000 +0100
+++ src/ConnectionService/src/WebCacheControl.cpp	2013-12-26 17:08:36.000000000 +0100
@@ -21,33 +21,47 @@
 /**
  * Instructs the RDBMS backend that all the tables within the schema specified
  * by the physical or logical connection should be refreshed, in case they are accessed.
+ * Deprecated.  Sets default timeToLive to 1 for tables not identified.
  */
 void
 coral::ConnectionService::WebCacheControl::refreshSchemaInfo( const std::string& connection ){
   std::map<std::string, WebCacheInfo >::iterator iter = m_webCacheConfiguration.find( connection );
   if( iter == m_webCacheConfiguration.end() ) {
     WebCacheInfo cacheInfo;
-    cacheInfo.setSchemaInfoRefresh( true );
+    cacheInfo.setDefaultTimeToLive( 1 );
     m_webCacheConfiguration.insert( std::make_pair( connection, cacheInfo ) );
   } else {
-    iter->second.setSchemaInfoRefresh( true );
+    iter->second.setDefaultTimeToLive( 1 );
   }
 }
 
 /**
  * Instructs the RDBMS backend that the specified table within the schema specified
  * by the physical or logical connection should be refreshed in case it is accessed.
+ * Deprecated: use instead setTableTimeToLive( connection, tableName, 1 )
  */
 void
 coral::ConnectionService::WebCacheControl::refreshTable( const std::string& connection,
                                                          const std::string& tableName ){
+  setTableTimeToLive( connection, tableName, 1 );
+}
+
+/**
+ * Instructs the RDBMS backend to cache queries that use the table specified by tableName
+ * within the schema specified by connection for the time length specified by timeToLive,
+ * 1=short, 2=long, 3=forever.  Default 2.
+ */
+void
+coral::ConnectionService::WebCacheControl::setTableTimeToLive( const std::string& connection,
+                                                               const std::string& tableName,
+                                                               int timeToLive ){
   std::map<std::string, WebCacheInfo >::iterator iter = m_webCacheConfiguration.find( connection );
   if( iter == m_webCacheConfiguration.end() ) {
     WebCacheInfo cacheInfo;
-    cacheInfo.setTableRefresh( tableName, true );
+    cacheInfo.setTableTimeToLive( tableName, timeToLive );
     m_webCacheConfiguration.insert( std::make_pair(connection,cacheInfo) );
   } else {
-    iter->second.setTableRefresh( tableName, true );
+    iter->second.setTableTimeToLive( tableName, timeToLive );
   }
 }
 
@@ -86,15 +100,15 @@
 
 /// constructor
 coral::ConnectionService::WebCacheInfo::WebCacheInfo() :
-  m_schemaInfoRefresh(false),
-  m_toRefreshTables(){
+  m_defaultTimeToLive(2),
+  m_tablesTimeToLive(){
 }
 
 /// constructor
 coral::ConnectionService::WebCacheInfo::WebCacheInfo( const WebCacheInfo& rhs ) :
   IWebCacheInfo(),
-  m_schemaInfoRefresh( rhs.m_schemaInfoRefresh ),
-  m_toRefreshTables( rhs.m_toRefreshTables ){
+  m_defaultTimeToLive( rhs.m_defaultTimeToLive ),
+  m_tablesTimeToLive( rhs.m_tablesTimeToLive ){
 }
 
 /// destructor
@@ -104,46 +118,47 @@
 /// assignment
 coral::ConnectionService::WebCacheInfo& coral::ConnectionService::WebCacheInfo::operator=( const WebCacheInfo& rhs ){
   if(this!=&rhs) {
-    m_schemaInfoRefresh = rhs.m_schemaInfoRefresh;
-    m_toRefreshTables = rhs.m_toRefreshTables;
+    m_defaultTimeToLive = rhs.m_defaultTimeToLive;
+    m_tablesTimeToLive = rhs.m_tablesTimeToLive;
   }
   return *this;
 }
 
 
-/// Checks if the schema info (data dictionary) is cached, i.e.it  does not need to be refreshed
+/// Checks if the schema info (data dictionary) is cached, i.e. it does not need to be refreshed
+/// Deprecated.  Returns true if the default timeToLive != 1
 bool
 coral::ConnectionService::WebCacheInfo::isSchemaInfoCached() const {
-  return !m_schemaInfoRefresh;
+  return m_defaultTimeToLive != 1;
 }
 
-/// Checks if a table in the schema is cached, i.e.it  does not need to be refreshed
+/// Checks if a table in the schema is cached, i.e. it  does not need to be refreshed
+/// Deprecated: use instead tableTimeToLive( tableName ) != 1
 bool
 coral::ConnectionService::WebCacheInfo::isTableCached( const std::string& tableName ) const {
-  bool ret = true;
-  if( m_schemaInfoRefresh ) {
-    ret = false;
-  } else {
-    std::set<std::string>::const_iterator iter = m_toRefreshTables.find( tableName );
-    if( iter != m_toRefreshTables.end() ) ret = false;
+  return tableTimeToLive( tableName) != 1;
+}
+
+/// Returns timeToLive value (1=short, 2=long, 3=forever) for a table in the schema
+int
+coral::ConnectionService::WebCacheInfo::tableTimeToLive( const std::string& tableName ) const {
+  std::map<std::string, int>::const_iterator iter = m_tablesTimeToLive.find( tableName );
+  if( iter == m_tablesTimeToLive.end() ) {
+    // not found, return the default
+    return m_defaultTimeToLive;
   }
-  return ret;
+  return iter->second;
 }
 
-/// sets the caching of the schema info
+
+/// sets default timeToLive.   only used by deprecated function.
 void
-coral::ConnectionService::WebCacheInfo::setSchemaInfoRefresh( bool flag ){
-  m_schemaInfoRefresh = flag;
+coral::ConnectionService::WebCacheInfo::setDefaultTimeToLive( int timeToLive ){
+  m_defaultTimeToLive = timeToLive;
 }
 
-
-/// sets the caching of the specified table
+/// sets the timeToLive of the specified table
 void
-coral::ConnectionService::WebCacheInfo::setTableRefresh( const std::string& tableName, bool flag ){
-  if(flag)
-  {
-    m_toRefreshTables.insert( tableName );
-  } else {
-    m_toRefreshTables.erase( tableName );
-  }
+coral::ConnectionService::WebCacheInfo::setTableTimeToLive( const std::string& tableName, int timeToLive ){
+  m_tablesTimeToLive[ tableName ] = timeToLive;
 }
--- src/ConnectionService/src/WebCacheControl.h.O	2013-12-23 21:22:11.000000000 +0100
+++ src/ConnectionService/src/WebCacheControl.h	2013-12-23 21:22:04.000000000 +0100
@@ -34,26 +34,30 @@
       /// assignment
       WebCacheInfo& operator=( const WebCacheInfo& rhs );
 
-      /// Checks if the schema info (data dictionary) is cached, i.e.it  does not need to be refreshed
+      /// Checks if the schema info (data dictionary) is cached, i.e. it does not need to be refreshed.
+      /// Deprecated.  Returns true if the default timeToLive != 1
       bool isSchemaInfoCached() const;
 
-      /// Checks if a table in the schema is cached, i.e.it  does not need to be refreshed
+      /// Checks if a table in the schema is cached, i.e. it does not need to be refreshed
+      /// Deprecated: use instead tableTimeToLive( tableName ) != 1
       bool isTableCached( const std::string& tableName ) const;
 
-      /// sets the caching of the schema info
-      void setSchemaInfoRefresh( bool flag );
+      /// Returns timeToLive value (1=short, 2=long, 3=forever) for a table in the schema
+      int tableTimeToLive( const std::string& tableName ) const;
 
-      /// sets the caching of the specified table
-      void setTableRefresh( const std::string& tableName, bool flag );
+      /// sets the default timeToLive. only used by deprecated function.
+      void setDefaultTimeToLive( int timeToLive );
 
-    private:
+      /// sets the timeToLive of the specified table
+      void setTableTimeToLive( const std::string& tableName, int timeToLive );
 
-      /// flag to set the caching of the schema info
-      bool m_schemaInfoRefresh;
+    private:
 
-      /// list of tables cached
-      std::set<std::string> m_toRefreshTables;
+      /// default timeToLive for tables not specified
+      int m_defaultTimeToLive;
 
+      /// associative array of tables to their timeToLive
+      std::map<std::string, int> m_tablesTimeToLive;
     };
 
 
@@ -72,17 +76,28 @@
       /**
          Instructs the RDBMS backend that all the tables within the schema specified
          by the physical or logical connection should be refreshed, in case they are accessed.
+	 Deprecated.  Sets default timeToLive to 1 for tables not identified.
       */
       void refreshSchemaInfo( const std::string& connection );
 
       /**
          Instructs the RDBMS backend that the specified table within the schema specified
          by the physical or logical connection should be refreshed in case it is accessed.
+	 Deprecated: use instead setTableTimeToLive( connection, tableName, 1 )
       */
       void refreshTable( const std::string& connection,
                          const std::string& tableName );
 
       /**
+         Instructs the RDBMS backend to cache queries that use the table specified by tableName
+	 within the schema specified by connection for the time length specified by timeToLive,
+	 1=short, 2=long, 3=forever.  Default 2.
+      */
+      void setTableTimeToLive( const std::string& connection,
+                               const std::string& tableName,
+			       int timeToLive );
+
+      /**
          Returns the web cache information for a schema given the corresponding physical or
          logical connection.
       */
--- src/FrontierAccess/src/QueryDefinition.cpp.O	2013-12-23 21:22:11.000000000 +0100
+++ src/FrontierAccess/src/QueryDefinition.cpp	2013-12-23 21:22:04.000000000 +0100
@@ -43,7 +43,7 @@
     m_rowOffset( 0 ),
     m_setQuery( 0, coral::IQueryDefinition::Union ),
     m_output(),
-    m_reload( false )
+    m_timeToLive( 2 )
 {
 }
 
@@ -63,7 +63,7 @@
     m_rowOffset( 0 ),
     m_setQuery( 0, coral::IQueryDefinition::Union ),
     m_output(),
-    m_reload( false )
+    m_timeToLive( 2 )
 {
   m_tableList.push_back( std::make_pair( tableName, tableName ) );
 }
@@ -250,26 +250,6 @@
       expressionParser.addToTableList( dynamic_cast< const ::coral::FrontierAccess::View& >( m_properties.schema().viewHandle( tableName ) ).description() );
   }
 
-  // Check if the current schema is to be refreshed
-  try
-  {
-    const coral::IWebCacheControl& cachectrl = m_properties.cacheControl();
-    const coral::IWebCacheInfo&    cacheinfo = cachectrl.webCacheInfo( m_properties.connectionString() );
-
-    log << coral::Verbose << "Checking web cache control for connection " << m_properties.connectionString() << coral::MessageStream::endmsg;
-
-    if( ! cacheinfo.isSchemaInfoCached() )
-      this->setReload();
-    else
-      this->setReload( false );
-  }
-  catch( const std::exception& e )
-  {
-    //log << coral::Verbose << "Connection string: " << m_properties.connectionString() << coral::MessageStream::endmsg;
-    log << coral::Verbose << e.what() << coral::MessageStream::endmsg;
-    log << coral::Verbose << "Running query in cached mode..." << coral::MessageStream::endmsg;
-  }
-
   // Construct the query.
   std::ostringstream os;
   os << "SELECT ";
@@ -347,15 +327,8 @@
     {
       const coral::IWebCacheControl& cachectrl = m_properties.cacheControl();
       const coral::IWebCacheInfo&    cacheinfo = cachectrl.webCacheInfo( m_properties.connectionString() );
-      if( ! cacheinfo.isTableCached( tableName ) )
-      {
-        log << coral::Verbose << "Table " << tableName << " is not cached: reload it" << coral::MessageStream::endmsg;
-        this->setReload( true );
-      }
-      else
-      {
-        log << coral::Verbose << "Table " << tableName << " is cached: do not reload it" << coral::MessageStream::endmsg;
-      }
+      this->setTimeToLive( cacheinfo.tableTimeToLive( tableName ) );
+      log << coral::Verbose << "TimeToLive for table " << tableName << " is " << this->timeToLive() << coral::MessageStream::endmsg;
     }
     catch( const std::exception& e )
     {
--- src/FrontierAccess/src/Statement.cpp.O	2013-12-23 21:22:11.000000000 +0100
+++ src/FrontierAccess/src/Statement.cpp	2013-12-23 21:22:04.000000000 +0100
@@ -236,7 +236,7 @@
       return true;
     }
 
-    bool Statement::execute( const coral::AttributeList& rowBuffer, bool forceReload )
+    bool Statement::execute( const coral::AttributeList& rowBuffer, int timeToLive )
     {
       try
       {
@@ -278,18 +278,12 @@
 
           try
           {
-            // Force cache update
-            if( forceReload )
-            {
-              mslog() << coral::Debug << "Refreshing data with query \"" << this->m_sqlStatement << "\"" << coral::MessageStream::endmsg;
-              m_properties.connection().setReload(1);
-            }
-            else
-            {
-              mslog() << coral::Verbose << "Executing query " << m_sqlStatement << coral::MessageStream::endmsg;
-              //mslog() << coral::Verbose << "Bind variables used to build the query: " << rowBuffer << coral::MessageStream::endmsg;
-              m_properties.connection().setReload(0);
-            }
+            // Set timeToLive value on the connection
+            m_properties.connection().setTimeToLive( timeToLive );
+            const char *ttlName = "";
+            if ( timeToLive == 1 ) ttlName = "short ";
+            else if ( timeToLive == 3 ) ttlName = "forever ";
+            mslog() << coral::Verbose << "Executing " << ttlName << "query " << m_sqlStatement << coral::MessageStream::endmsg;
 
             // Perform the execution
             m_session->getData( m_listOfRequests );
--- src/FrontierAccess/src/QueryDefinition.h.O	2013-12-23 21:22:11.000000000 +0100
+++ src/FrontierAccess/src/QueryDefinition.h	2013-12-26 16:39:46.000000000 +0100
@@ -97,19 +97,19 @@
 
     protected:
       /**
-       * Check if query should be executed with reload option enabled
+       * Return the timeToLive value for the current schema or table
        */
-      bool reload() const
+      int timeToLive() const
       {
-        return this->m_reload;
+        return m_timeToLive;
       }
 
       /**
-       * Set reload flag
+       * Set timeToLive value for the current schema or table
        */
-      void setReload( bool flag=true )
+      void setTimeToLive( int timeToLive )
       {
-        this->m_reload = flag;
+        m_timeToLive = timeToLive;
       }
 
     private:
@@ -163,8 +163,8 @@
       /// The final output list
       std::vector< std::string >                           m_output;
 
-      /// Reload flag, it is set if web cache control provides the positive hint about a schema or table to be reloaded
-      bool m_reload;
+      /// timeToLive value from web cache control for the current schema or table
+      int m_timeToLive;
     };
   }
 }
--- src/FrontierAccess/src/Query.cpp.O	2013-12-23 21:22:11.000000000 +0100
+++ src/FrontierAccess/src/Query.cpp	2013-12-23 21:22:04.000000000 +0100
@@ -104,12 +104,7 @@
     statement->setNumberOfPrefetchedRows( m_cacheSize );
   }
 
-  // Bind and execute.
-  //   const char* reloadEnv = ::getenv( "CORAL_FRONTIER_RELOAD" ); bool reload = false;
-  //   if( reloadEnv != 0 )
-  //     reload = true;
-
-  bool result = statement->execute( this->bindData(), this->reload() );
+  bool result = statement->execute( this->bindData(), this->timeToLive() );
 
   if ( ! result )
     throw coral::QueryException( this->sessionProperties().domainProperties().service()->name(), "Could not execute a query", "IQuery::execute" );
--- src/FrontierAccess/src/OperationWithQuery.cpp.O	2013-12-23 21:22:11.000000000 +0100
+++ src/FrontierAccess/src/OperationWithQuery.cpp	2013-12-23 21:22:04.000000000 +0100
@@ -25,15 +25,11 @@
   if ( m_statement.empty() )
     return 0;
 
-  const char* reloadEnv = ::getenv( "CORAL_FRONTIER_RELOAD" ); bool reload = false;
-  if( reloadEnv != 0 )
-    reload = true;
-
   m_statement += " ( " + m_queryDefinition->sqlFragment() + " )";
 
   coral::FrontierAccess::Statement statement( m_queryDefinition->sessionProperties(), m_statement );
 
-  if ( ! statement.execute( m_queryDefinition->bindData(), reload ) )
+  if ( ! statement.execute( m_queryDefinition->bindData() ) )
     return 0;
 
   long result = statement.numberOfRowsProcessed();
--- src/FrontierAccess/src/Statement.h.O	2013-12-23 21:22:11.000000000 +0100
+++ src/FrontierAccess/src/Statement.h	2013-12-23 21:22:04.000000000 +0100
@@ -81,7 +81,7 @@
        * Returns false in case of any error, true otherwise.
        *
        */
-      bool execute( const coral::AttributeList& rowBuffer, bool forceReload );
+      bool execute( const coral::AttributeList& rowBuffer, int timeToLive=2 );
 
       /**
        * Returns the number of rows processed.
--- src/FrontierAccess/src/Connection.cpp.O	2013-12-23 21:22:11.000000000 +0100
+++ src/FrontierAccess/src/Connection.cpp	2013-12-23 21:22:04.000000000 +0100
@@ -191,7 +191,7 @@
   //   // Use a statement to find the Oracle server version behind the Frontier app. server
   //   coral::AttributeList inBuffer;
   //   coral::FrontierAccess::Statement query( *m_properties, "SELECT 1 FROM DUAL" ); // FIXME !!!!
-  //   this->m_connected = query.execute( inBuffer, false /* rely on cache */ ); // We realy now on the Frontier client + caching to avoid Oracle server acess overhead
+  //   this->m_connected = query.execute( inBuffer );
 
   return available;
 }
--- src/FrontierAccess/src/Schema.cpp.O	2013-12-23 21:22:11.000000000 +0100
+++ src/FrontierAccess/src/Schema.cpp	2013-12-23 21:22:04.000000000 +0100
@@ -79,7 +79,7 @@
     bindData.extend<std::string>( "table" );
     bindData["table"].data<std::string>() = tableName;
   }
-  statement.execute( bindData, false );
+  statement.execute( bindData );
   coral::AttributeList outputData;
   outputData.extend<std::string>("TABLE_NAME");
   const std::string& tName = outputData["TABLE_NAME"].data<std::string>();
@@ -262,7 +262,7 @@
       bindData.extend<std::string>( "view" );
       bindData["owner"].data<std::string>() = m_sessionProperties.schemaName();
       bindData["view"].data<std::string>() = viewName;
-      statement.execute( bindData, false );
+      statement.execute( bindData );
       coral::AttributeList output;
       output.extend<std::string>( "OBJECT_NAME" );
       const std::string& vName = output.begin()->data<std::string>();
@@ -366,7 +366,7 @@
   coral::AttributeList bindData;
   bindData.extend<std::string>( "owner" );
   bindData.begin()->data<std::string>() = m_sessionProperties.schemaName();
-  statement.execute( bindData, false );
+  statement.execute( bindData );
   coral::AttributeList output;
   output.extend<std::string>( "VIEW_NAME" );
   const std::string& viewName = output.begin()->data<std::string>();
--- src/FrontierAccess/src/Session.cpp.O	2013-12-23 21:22:11.000000000 +0100
+++ src/FrontierAccess/src/Session.cpp	2013-12-23 21:22:04.000000000 +0100
@@ -162,7 +162,7 @@
 
   coral::FrontierAccess::Statement query( *m_properties, "SELECT USERNAME FROM ALL_USERS WHERE USERNAME=:\"user\"" );
 
-  if( ! query.execute( inBuffer, false ) )
+  if( ! query.execute( inBuffer ) )
   {
     // FIXME - error reporting
     ;
--- src/FrontierAccess/src/TableDescriptionProxy.cpp.O	2013-12-23 21:22:11.000000000 +0100
+++ src/FrontierAccess/src/TableDescriptionProxy.cpp	2013-12-23 21:22:04.000000000 +0100
@@ -81,7 +81,7 @@
   outputData.extend<int>        ( "CHAR_LENGTH"      ); //const int&         columnLength    = outputData["CHAR_LENGTH"   ].data<int>();
   outputData.extend<int>        ( "DATA_SCALE"       ); const int&         columnScale     = outputData["DATA_SCALE"    ].data<int>();
 
-  if ( ! statement.execute( inputData, false ) )
+  if ( ! statement.execute( inputData ) )
   {
     // FIXME - error reporting
     ;
@@ -236,7 +236,7 @@
   (*bindData)[0].data<std::string>() = m_sessionProperties.schemaName();
   (*bindData)[1].data<std::string>() = m_description->name();
 
-  if ( ! statement.execute( *bindData, false ) )
+  if ( ! statement.execute( *bindData ) )
   {
     throw coral::SchemaException( m_sessionProperties.domainProperties().service()->name(), "Could not retrieve the unique constraints defined in a table", "TableDescriptionProxy::refreshConstraints" );
   }
@@ -307,7 +307,7 @@
   (*bindData)[0].data<std::string>() = m_sessionProperties.schemaName();
   (*bindData)[1].data<std::string>() = m_description->name();
 
-  if ( ! statement.execute( *bindData, false ) )
+  if ( ! statement.execute( *bindData ) )
   {
     throw coral::SchemaException( m_sessionProperties.domainProperties().service()->name(), "Could not retrieve the primary key information defined in a table", "TableDescriptionProxy::refreshPrimaryKeyInfo" );
   }
@@ -393,7 +393,7 @@
   output.extend<std::string>( "TABLESPACE_NAME" ); const std::string& tableSpaceName = output["TABLESPACE_NAME"].data<std::string>();
   output.extend<std::string>( "COLUMN_NAME" )    ; const std::string& columnName     = output["COLUMN_NAME"    ].data<std::string>();
 
-  if ( ! statement.execute( bindData, false ) )
+  if ( ! statement.execute( bindData ) )
     throw coral::SchemaException( m_sessionProperties.domainProperties().service()->name(), "Could not retrieve the index information defined in a table", "TableDescriptionProxy::refreshPrimaryKeyInfo" );
 
   statement.defineOutput( output );
@@ -473,7 +473,7 @@
   output.extend<std::string>( "FK_COL"    ); const std::string& foreignKeyColumnName = output["FK_COL"   ].data<std::string>();
   output.extend<std::string>( "REF_COL"   ); const std::string& referencedColumnName = output["REF_COL"  ].data<std::string>();
 
-  if ( ! statement.execute( bindData, false ) )
+  if ( ! statement.execute( bindData ) )
   {
     throw coral::SchemaException( m_sessionProperties.domainProperties().service()->name(), "Could not retrieve the foreign key information defined in a table", "TableDescriptionProxy::refreshForeignKeyInfo" );
   }
@@ -514,7 +514,7 @@
     bindData[0].data<std::string>() = m_sessionProperties.schemaName();
     bindData[1].data<std::string>() = m_description->name();
 
-    if ( ! statement.execute( bindData, false ) )
+    if ( ! statement.execute( bindData ) )
     {
       throw coral::SchemaException( m_sessionProperties.domainProperties().service()->name(), "Could not retrieve the tablespace for a table", "ITableDescription::tableSpaceName" );
     }
--- src/FrontierAccess/src/View.cpp.O	2013-12-23 21:22:11.000000000 +0100
+++ src/FrontierAccess/src/View.cpp	2013-12-23 21:22:04.000000000 +0100
@@ -91,7 +91,7 @@
 
   coral::FrontierAccess::Statement statement( m_sessionProperties, os.str() );
 
-  if ( ! statement.execute( coral::AttributeList(), false ) )
+  if ( ! statement.execute( coral::AttributeList() ) )
     throw coral::SchemaException( m_sessionProperties.domainProperties().service()->name(), "Could not read the definition of a view", "View::refreshDefinition" );
 
   coral::AttributeList* output = new coral::AttributeList;
--- src/RelationalAccess/RelationalAccess/IWebCacheControl.h.O	2013-12-23 21:22:11.000000000 +0100
+++ src/RelationalAccess/RelationalAccess/IWebCacheControl.h	2013-12-23 21:22:04.000000000 +0100
@@ -20,16 +20,27 @@
     /**
        Instructs the RDBMS backend that all the tables within the schema specified
        by the physical or logical connection should be refreshed, in case they are accessed.
+       Deprecated.  Sets default timeToLive to 1 for tables not identified.
     */
     virtual void refreshSchemaInfo( const std::string& connection ) = 0;
 
     /**
        Instructs the RDBMS backend that the specified table within the schema specified
        by the physical or logical connection should be refreshed in case it is accessed.
+       Deprecated: use instead setTabletimeToLive( connection, tableName, 1 )
      */
     virtual void refreshTable( const std::string& connection,
                                const std::string& tableName ) = 0;
 
+      /**
+         Instructs the RDBMS backend to cache queries that use the table specified by tableName
+	 within the schema specified by connection for the time length specified by timeToLive,
+	 1=short, 2=long, 3=forever.  Default 2.
+      */
+      virtual void setTableTimeToLive( const std::string& connection,
+                                       const std::string& tableName,
+			               int timeToLive ) = 0;
+
     /**
        Returns the web cache information for a schema given the corresponding physical or
        logical connection.
--- src/RelationalAccess/RelationalAccess/IWebCacheInfo.h.O	2013-12-23 21:22:11.000000000 +0100
+++ src/RelationalAccess/RelationalAccess/IWebCacheInfo.h	2013-12-23 21:22:04.000000000 +0100
@@ -12,12 +12,17 @@
   class IWebCacheInfo
   {
   public:
-    /// Checks if the schema info (data dictionary) is cached, i.e.it  does not need to be refreshed
+    /// Checks if the schema info (data dictionary) is cached, i.e. it does not need to be refreshed.
+    /// Deprecated.  Returns true if the default timeToLive != 1
     virtual bool isSchemaInfoCached() const = 0;
 
-    /// Checks if a table in the schema is cached, i.e.it  does not need to be refreshed
+    /// Checks if a table in the schema is cached, i.e. it does not need to be refreshed.
+    /// Deprecated: use instead tableTimeToLive( tableName ) != 1
     virtual bool isTableCached( const std::string& tableName ) const = 0;
 
+    /// Returns timeToLive value (1=short, 2=long, 3=forever) for a table in the schema
+    virtual int tableTimeToLive( const std::string& tableName ) const = 0;
+
   protected:
     /// Protected empty destructor
     virtual ~IWebCacheInfo() {}
