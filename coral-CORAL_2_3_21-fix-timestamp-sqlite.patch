diff --git a/src/SQLiteAccess/src/SQLiteStatement.cpp b/src/SQLiteAccess/src/SQLiteStatement.cpp
index 5038806..6afb78c 100644
--- a/src/SQLiteAccess/src/SQLiteStatement.cpp
+++ b/src/SQLiteAccess/src/SQLiteStatement.cpp
@@ -23,6 +23,30 @@
 #include "SQLiteStatement.h"
 #include "StatementStatistics.h"
 
+namespace coral {
+  namespace SQLiteAccess {
+    std::string toSimpleString( const boost::posix_time::ptime& time ){
+      boost::posix_time::time_facet* facet = new boost::posix_time::time_facet("%Y-%m-%d %H:%M:%S%F");
+      std::ostringstream os;
+      os.imbue(std::locale(os.getloc(), facet));
+      os << time;
+      return os.str();
+    }
+
+    bool isInteger( const char* str ){
+      std::string s(str);
+      size_t sz = s.size();
+      bool isNumber = sz>0;
+      size_t i = 0;
+      while( isNumber && i<sz ){
+	isNumber = isdigit(s[i]);
+	i++;
+      }  
+      return isNumber;
+    }
+  }
+}
+
 using namespace coral::SQLiteAccess;
 
 SQLiteStatement::SQLiteStatement( boost::shared_ptr<const SessionProperties> properties ) :
@@ -185,15 +209,15 @@ SQLiteStatement::bind( const coral::AttributeList& inputData )
       }
       else if(st(attributeType)==SQLT_DATE )
       {
-        coral::TimeStamp::ValueType value=coral::TimeStamp((*iAttribute).data<coral::Date>().time()).total_nanoseconds();
-        rs=sqlite3_bind_int64(m_stmt,idx,(long long int)value);
-        log<<coral::Debug<<"(DATE) "<<value<<" ";
+	std::string val=toSimpleString( (*iAttribute).data<coral::Date>().time() );
+        rs=sqlite3_bind_text(m_stmt,idx,val.c_str(),val.length(),SQLITE_TRANSIENT);
+        log<<coral::Debug<<"(DATE) "<<val<<" ";
       }
       else if(st(attributeType)==SQLT_TIMESTAMP)
       {
-        coral::TimeStamp::ValueType value=(*iAttribute).data<coral::TimeStamp>().total_nanoseconds();
-        rs=sqlite3_bind_int64(m_stmt,idx,(long long int)value);
-        log<<coral::Debug<<"(TIME) "<<value<<" ";
+	std::string val=toSimpleString( (*iAttribute).data<coral::TimeStamp>().time() );
+        rs=sqlite3_bind_text(m_stmt,idx,val.c_str(),val.length(),SQLITE_TRANSIENT);
+        log<<coral::Debug<<"(TIME) "<<val<<" ";
       }
     }
     m_properties->mutex()->unlock();
@@ -446,10 +470,16 @@ SQLiteStatement::defineOutput( coral::AttributeList& outputData )
       {
         //lock the sqlite3 methods
         m_properties->mutex()->lock();
-        long long int result = sqlite3_column_int64(m_stmt,idx);
+	const char* result = (const char*)sqlite3_column_text(m_stmt,idx);
         m_properties->mutex()->unlock();
 
-        coral::TimeStamp t(result);
+	coral::TimeStamp t;
+        if(isInteger( result ) ){
+          long long int tm = boost::lexical_cast<long long int>(std::string(result) );
+	  t = coral::TimeStamp( tm );
+	} else {
+	  t = coral::TimeStamp( boost::posix_time::time_from_string(std::string(result)));
+	}
         if( st(attributeType)==SQLT_DATE ) {
           iAttribute->data<coral::Date>()=coral::Date(t.time());
         }else{
