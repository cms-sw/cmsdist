diff -arupN src.orig/ConnectionService/src/ConnectionPool.cpp src/ConnectionService/src/ConnectionPool.cpp
--- src.orig/ConnectionService/src/ConnectionPool.cpp	2011-03-22 12:17:18.000000000 +0100
+++ src/ConnectionService/src/ConnectionPool.cpp	2012-07-04 10:05:39.000000000 +0200
@@ -428,7 +428,7 @@ coral::ConnectionService::ConnectionPool
   //            << " seconds)" << std::endl;
   //}
   boost::xtime xt;
-  boost::xtime_get(&xt, boost::TIME_UTC);
+  boost::xtime_get(&xt, boost::TIME_UTC_);
   if( m_connectionServiceConfiguration.poolCleanUpPeriod() > 0 )
     xt.sec += m_connectionServiceConfiguration.poolCleanUpPeriod();
   else
diff -arupN src.orig/CoralKernel/src/PluginManager.cpp src/CoralKernel/src/PluginManager.cpp
--- src.orig/CoralKernel/src/PluginManager.cpp	2011-08-23 17:58:10.000000000 +0200
+++ src/CoralKernel/src/PluginManager.cpp	2012-07-04 10:06:28.000000000 +0200
@@ -274,7 +274,7 @@ coral::PluginManager::loadLibrary( const
     std::cout << "***** OracleAccess DEBUG: strace OCIEnvCreate calls (START) *****" << std::endl;
     system( cmd.str().c_str() );
     // Sleep 1 second (else dlopen may be executed before strace is attached)
-    boost::xtime tsleep; boost::xtime_get( &tsleep, boost::TIME_UTC ); tsleep.sec += 1;
+    boost::xtime tsleep; boost::xtime_get( &tsleep, boost::TIME_UTC_ ); tsleep.sec += 1;
     boost::thread::sleep( tsleep );
   }
 #endif
diff -arupN src.orig/CORAL_SERVER/CoralServerProxy/src/PacketHeaderQueue.cpp src/CORAL_SERVER/CoralServerProxy/src/PacketHeaderQueue.cpp
--- src.orig/CORAL_SERVER/CoralServerProxy/src/PacketHeaderQueue.cpp	2010-05-26 10:12:41.000000000 +0200
+++ src/CORAL_SERVER/CoralServerProxy/src/PacketHeaderQueue.cpp	2012-07-04 10:07:09.000000000 +0200
@@ -85,7 +85,7 @@ PacketHeaderQueue::timed_push ( PacketPt
   // wait unil we have an empty slot
   while ( m_queue.size() >= m_maxSize ) {
     boost::xtime xt;
-    boost::xtime_get ( &xt, boost::TIME_UTC ) ;
+    boost::xtime_get ( &xt, boost::TIME_UTC_ ) ;
     xt.sec += timeoutSec;
     if ( not m_condFull.timed_wait( qlock, xt ) ) {
       return false ;
diff -arupN src.orig/CORAL_SERVER/CoralServerProxy/src/PacketQueue.cpp src/CORAL_SERVER/CoralServerProxy/src/PacketQueue.cpp
--- src.orig/CORAL_SERVER/CoralServerProxy/src/PacketQueue.cpp	2010-05-26 10:12:41.000000000 +0200
+++ src/CORAL_SERVER/CoralServerProxy/src/PacketQueue.cpp	2012-07-04 10:06:53.000000000 +0200
@@ -85,7 +85,7 @@ PacketQueue::timed_push ( PacketPtr pack
   // wait unil we have an empty slot
   while ( m_queue.size() >= m_maxSize ) {
     boost::xtime xt;
-    boost::xtime_get ( &xt, boost::TIME_UTC ) ;
+    boost::xtime_get ( &xt, boost::TIME_UTC_ ) ;
     xt.sec += timeoutSec;
     if ( not m_condFull.timed_wait( qlock, xt ) ) {
       return false ;
diff -arupN src.orig/CORAL_SERVER/CoralSockets/src/ReplyManager.cpp src/CORAL_SERVER/CoralSockets/src/ReplyManager.cpp
--- src.orig/CORAL_SERVER/CoralSockets/src/ReplyManager.cpp	2011-09-16 16:47:38.000000000 +0200
+++ src/CORAL_SERVER/CoralSockets/src/ReplyManager.cpp	2012-07-04 10:06:37.000000000 +0200
@@ -75,7 +75,7 @@ boost::shared_ptr<ByteBuffer> ReplySlot:
     // so better use a time out..
     // todo: handle errors (connection lost etc...)
     boost::xtime xt;
-    xtime_get(&xt, boost::TIME_UTC);
+    xtime_get(&xt, boost::TIME_UTC_);
     xt.sec += 20;
     if ( !m_cond.timed_wait(lock, xt) )
     {
# bla bla
