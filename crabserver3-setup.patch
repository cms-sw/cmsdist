diff --git setup_dependencies.py setup_dependencies.py
index 6d0d3ab..5aa25e9 100644
--- setup_dependencies.py
+++ setup_dependencies.py
@@ -28,7 +28,7 @@ dependencies = {'wmc-rest':{
                         'systems':['wmc-base']
                         },
                 'wmc-runtime':{
-                        'packages': ['WMCore.WMRuntime', 'WMCore.WMSpec+', 'PSetTweaks', 'WMCore.FwkJobReport', 'WMCore.Storage+'],
+                        'packages': ['WMCore.WMRuntime+', 'WMCore.WMSpec+', 'PSetTweaks', 'WMCore.FwkJobReport', 'WMCore.Storage+'],
                         'modules' : ['WMCore.Algorithms.ParseXMLFile'],
                         'systems':['wmc-base']
                         },
@@ -128,10 +128,10 @@ dependencies = {'wmc-rest':{
                                     'WMCore.Services.Service', 'WMCore.Services.pycurl_manager'],
                         },
                 'crabtaskworker':{
-                        'packages':['WMCore..WorkQueue', 'WMCore.Credential', 'WMCore.Algorithms+', 'WMCore.WMSpec+',
-                                     'WMCore.JobSplitting', 'WMCore.Services.SiteDB+', 'WMCore.Services.DBS+', 'WMCore.Services.UserFileCache+'],
+                        'packages':['WMCore.WorkQueue', 'WMCore.Credential', 'WMCore.Algorithms+', 'WMCore.WMSpec+',
+                                     'WMCore.JobSplitting', 'WMCore.Services.SiteDB+', 'WMCore.Services.DBS+', 'WMCore.Services.UserFileCache+', 'WMCore.Services.PhEDEx+'],
                         'modules': ['WMCore.WMBS.File', 'WMCore.WMBS.WMBSBase', 'WMCore.WMBS.__init__'],
-                        'systems': ['wmc-database'],
+                        'systems': ['wmc-database', 'wmc-runtime'],
                         },
                 'wmclient':{
                         'systems': ['wmc-runtime', 'wmc-database']
diff --git src/python/WMCore/Credential/Proxy.py src/python/WMCore/Credential/Proxy.py
index 95c85b5..0502fba 100644
--- src/python/WMCore/Credential/Proxy.py
+++ src/python/WMCore/Credential/Proxy.py
@@ -108,9 +108,6 @@ def myProxyEnvironment(userDN, serverCert, serverKey, myproxySrv, proxyDir, logg
     finally:
         os.environ = originalEnvironment

-def cmd_exists(cmd):
-    return subprocess.call("type " +  cmd, shell=True,
-        stdout=subprocess.PIPE, stderr=subprocess.PIPE) == 0

 class Proxy(Credential):
     """
@@ -131,6 +128,8 @@ class Proxy(Credential):
         self.proxyValidity = args.get( "proxyValidity", '') #lenght of the proxy
         self.myproxyValidity = args.get( "myproxyValidity", '168:00') #lenght of the myproxy
         self.myproxyMinTime = args.get( "myproxyMinTime", 4) #threshold used in checkProxy
+        self.myproxyAccount = args.get( "myproxyAccount", "") #to be used when computing myproxy account (-l option)
+        self.rfcCompliant = args.get( "rfcCompliant", True) #to be used when computing myproxy account (-l option)

         # User vo paramaters
         self.vo = 'cms'
@@ -145,7 +144,7 @@ class Proxy(Credential):

         ## adding credential path
         self.credServerPath = args.get("credServerPath", '/tmp')
-        if not cmd_exists('voms-proxy-info'):
+        if not self.cmd_exists('voms-proxy-info'):
             raise CredentialException('voms-proxy-info command not found')

     def setUI(self):
@@ -160,15 +159,24 @@ class Proxy(Credential):

         return ui

+    def cmd_exists(self, cmd):
+        return subprocess.call(self.setUI() + "type " +  cmd, shell=True,
+            stdout=subprocess.PIPE, stderr=subprocess.PIPE) == 0
+
     def getUserCertEnddate(self):
         """
         Return the number of days until the expiration of the user cern in .globus/usercert.pem
         """
         out, _, retcode = execute_command('grid-cert-info -enddate', self.logger, self.commandTimeout)
         if retcode == 0:
-            try:
-                exptime = datetime.strptime(out[:-1], '%b  %d  %H:%M:%S %Y %Z')
-            except ValueError:
+            possibleFormats = ['%b  %d  %H:%M:%S %Y %Z', '%b %d %H:%M:%S %Y %Z']
+            exptime = None
+            for frmt in possibleFormats:
+                try:
+                    exptime = datetime.strptime(out[:-1], frmt)
+                except ValueError:
+                    pass
+            if not exptime:
                 #This ValueError should not happen, but just in case I want a meaningful message
                 raise CredentialException('Cannot decode "grid-cert-info -enddate" date format. Please contact a developer')
             daystoexp = (exptime - datetime.utcnow()).days
@@ -275,7 +283,7 @@ class Proxy(Credential):
         """
         Proxy creation.
         """
-        createCmd = 'voms-proxy-init -voms %s:%s -valid %s' % (self.vo, self.getProxyDetails( ), self.proxyValidity )
+        createCmd = 'voms-proxy-init -voms %s:%s -valid %s %s' % (self.vo, self.getProxyDetails( ), self.proxyValidity, '-rfc' if self.rfcCompliant else '' )
         execute_command(self.setUI() +  createCmd, self.logger, self.commandTimeout )

         return
@@ -310,12 +318,14 @@ class Proxy(Credential):
             credential = self.getProxyFilename( serverRenewer )

         if self.myproxyServer:
-            myproxyDelegCmd = 'X509_USER_PROXY=%s ; myproxy-init -d -n -s %s' % (credential, self.myproxyServer)
+            myproxyDelegCmd = 'export GT_PROXY_MODE=%s ; myproxy-init -d -n -s %s' % ('rfc' if self.rfcCompliant else 'old', self.myproxyServer)

             if nokey is True:
-                credname = sha1(self.userDN).hexdigest()
-                myproxyDelegCmd = 'X509_USER_PROXY=%s ; myproxy-init -d -n -s %s -x -R \'%s\' -x -Z \'%s\' -l \'%s\' -t 168:00 -c %s' \
-                                  % (credential, self.myproxyServer, self.serverDN, self.serverDN, credname, self.myproxyValidity)
+                self.logger.debug("Calculating hash of %s for credential name" % (self.userDN+"_"+self.myproxyAccount))
+                credname = sha1(self.userDN+"_"+self.myproxyAccount).hexdigest()
+                myproxyDelegCmd = 'export GT_PROXY_MODE=%s ; myproxy-init -d -n -s %s -x -R \'%s\' -x -Z \'%s\' -l \'%s\' -t 168:00 -c %s' \
+                                  % ('rfc' if self.rfcCompliant else 'old', self.myproxyServer, self.serverDN, \
+                                   self.serverDN, credname, self.myproxyValidity)
             elif serverRenewer and len( self.serverDN.strip() ) > 0:
                 serverCredName = sha1(self.serverDN).hexdigest()
                 myproxyDelegCmd += ' -x -R \'%s\' -Z \'%s\' -k %s -t 168:00 -c %s ' \
@@ -335,15 +345,21 @@ class Proxy(Credential):
         to a server.
         """
         proxyTimeleft = -1
-
         if self.myproxyServer:
-
             if nokey is True and serverRenewer is True:
-                credname = sha1(self.userDN).hexdigest()
+                self.logger.debug("Calculating hash of %s for credential name" % (self.userDN+"_"+self.myproxyAccount))
+                credname = sha1(self.userDN+"_"+self.myproxyAccount).hexdigest()
                 checkMyProxyCmd = 'myproxy-info -l %s -s %s' %(credname, self.myproxyServer)
                 output, _, retcode = execute_command(self.setUI() +  checkMyProxyCmd, self.logger, self.commandTimeout )
                 if retcode > 0 or not output:
                     return proxyTimeleft
+
+                trustedRetrList = re.compile('trusted retrieval policy: (.*)').findall(output)
+                if len(trustedRetrList) > 1 or len(trustedRetrList) == 0:
+                    raise CredentialException("Unexpected result while decoding trusted retrievers list: " + str(trustedRetrList))
+                else:
+                    self.trustedRetrievers = trustedRetrList[0]
+
                 timeleftList = re.compile("timeleft: (?P<hours>[\\d]*):(?P<minutes>[\\d]*):(?P<seconds>[\\d]*)").findall(output)
                 if len(timeleftList) > 1 or len(timeleftList) == 0:
                     raise CredentialException(str(timeleftList))
@@ -504,7 +520,7 @@ class Proxy(Credential):
         ## get a new delegated proxy
         proxyFilename = os.path.join( self.credServerPath, sha1( self.userDN + self.vo + self.group + self.role ).hexdigest() )
         cmdList.append('myproxy-logon -d -n -s %s -o %s -l \"%s\" -t 168:00'
-                       % (self.myproxyServer, proxyFilename, sha1(self.userDN).hexdigest() ))
+                       % (self.myproxyServer, proxyFilename, sha1(self.userDN+"_"+self.myproxyAccount).hexdigest() ))
         logonCmd = ' '.join(cmdList)
         msg, _, retcode = execute_command(self.setUI() + logonCmd, self.logger, self.commandTimeout)

@@ -550,12 +566,17 @@ class Proxy(Credential):

         self.logger.debug( 'Requested voms validity: %s' % vomsValid )

+        msg, _, retcode = execute_command(self.setUI() + 'voms-proxy-info -type -file %s' % proxy, self.logger, self.commandTimeout)
+        if retcode > 0:
+            self.logger.error('Cannot get proxy type' % msg )
+            return
+        isRFC = msg == 'RFC compliant proxy\n'
         ## set environ and add voms extensions
         cmdList = []
         cmdList.append('env')
         cmdList.append('X509_USER_PROXY=%s' %proxy)
-        cmdList.append('voms-proxy-init -noregen -voms %s -out %s -bits 1024 -valid %s'
-                       % (voAttribute, proxy, vomsValid) )
+        cmdList.append('voms-proxy-init -noregen -voms %s -out %s -bits 1024 -valid %s %s'
+                       % (voAttribute, proxy, vomsValid,  '-rfc' if isRFC  else '') )
         cmd = ' '.join(cmdList)
         msg, _, retcode = execute_command(self.setUI() + cmd, self.logger, self.commandTimeout)
