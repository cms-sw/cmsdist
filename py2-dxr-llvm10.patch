diff --git a/dxr/plugins/clang/dxr-index.cpp b/dxr/plugins/clang/dxr-index.cpp
index bba5563..bd95878 100644
--- a/dxr/plugins/clang/dxr-index.cpp
+++ b/dxr/plugins/clang/dxr-index.cpp
@@ -3,6 +3,7 @@
 #include "clang/AST/RecursiveASTVisitor.h"
 #include "clang/Basic/SourceManager.h"
 #include "clang/Basic/Version.h"
+#include "clang/Basic/FileManager.h"
 #include "clang/Frontend/CompilerInstance.h"
 #include "clang/Frontend/FrontendPluginRegistry.h"
 #include "clang/Lex/Lexer.h"
@@ -158,7 +159,7 @@ public:
       m_currentFunction(NULL) {
     inner = ci.getDiagnostics().takeClient();
     ci.getDiagnostics().setClient(this, false);
-    ci.getPreprocessor().addPPCallbacks(llvm::make_unique<PreprocThunk>(this));
+    ci.getPreprocessor().addPPCallbacks(std::make_unique<PreprocThunk>(this));
   }
 
   virtual DiagnosticConsumer *clone(DiagnosticsEngine &Diags) const {
@@ -390,7 +391,7 @@ public:
       recordValue("name", nd->getNameAsString());
       recordValue("qualname", getQualifiedName(*nd));
       recordValue("loc", locationToString(d->getLocation()));
-      recordValue("kind", d->getKindName());
+      recordValue("kind", d->getKindName().str());
       printScope(d);
       // Linkify the name, not the `enum'
       printExtent(nd->getLocation(), nd->getLocation());
@@ -1070,7 +1071,7 @@ public:
         // you include a nonexistent file.
         !file ||
 
-        !(target = getFileInfo(file->getName()))->interesting ||
+        !(target = getFileInfo(file->getName().str()))->interesting ||
 
         // TODO: Come up with some kind of reasonable extent for macro-based
         // includes, like #include FOO_MACRO.
@@ -1151,7 +1152,7 @@ void PreprocThunk::InclusionDirective(  // same in 3.2 and 3.3
 class DXRIndexAction : public PluginASTAction {
 protected:
   std::unique_ptr<ASTConsumer> CreateASTConsumer(CompilerInstance &CI, llvm::StringRef f) {
-    return llvm::make_unique<IndexConsumer>(CI);
+    return std::make_unique<IndexConsumer>(CI);
   }
 
   bool ParseArgs(const CompilerInstance &CI,
