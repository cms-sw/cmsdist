diff --git a/include/ap_int_base.h b/include/ap_int_base.h
index 091552a..1d30fea 100644
--- a/include/ap_int_base.h
+++ b/include/ap_int_base.h
@@ -122,7 +122,7 @@ struct ap_int_base : public _AP_ROOT_TYPE<_AP_W, _AP_S> {
    */
   typedef typename retval<AP_MAX((_AP_W + 7) / 8, 8), _AP_S>::Type RetType;
 
-  static const int width = _AP_W;
+  constexpr static int width = _AP_W;
 
   template <int _AP_W2, bool _AP_S2>
   struct RType {
diff --git a/include/etc/ap_private.h b/include/etc/ap_private.h
index 0c29a0a..1684b13 100644
--- a/include/etc/ap_private.h
+++ b/include/etc/ap_private.h
@@ -1590,7 +1590,7 @@ ASSIGN_OP_FROM_INT(double)
   }
 
  public:
-  INLINE ap_private() {
+  INLINE ap_private(): VAL(0) {
     set_canary();
     clearUnusedBits();
     check_canary();
@@ -3022,8 +3022,9 @@ class ap_private<_AP_W, _AP_S, false> {
 #pragma warning(disable : 4521 4522)
 #endif
  public:
-  enum { BitWidth = _AP_W, _AP_N = (_AP_W + 63) / 64 };
-  static const int width = _AP_W;
+  static constexpr uint32_t BitWidth = _AP_W;
+  static constexpr uint32_t _AP_N = (_AP_W + 63) / 64;
+  constexpr static int width = _AP_W;
 
  private:
   /// This constructor is used only internally for speed of construction of
@@ -3157,10 +3158,8 @@ class ap_private<_AP_W, _AP_S, false> {
   INLINE void set_pVal(int i, uint64_t value) { pVal[i] = value; }
 
   /// This enum is used to hold the constants we needed for ap_private.
-  enum {
-    APINT_BITS_PER_WORD = sizeof(uint64_t) * 8, ///< Bits in a word
-    APINT_WORD_SIZE = sizeof(uint64_t)          ///< Byte size of a word
-  };
+  static constexpr int APINT_BITS_PER_WORD = sizeof(uint64_t) * 8;
+  static constexpr int APINT_WORD_SIZE = sizeof(uint64_t);
 
   enum {
     excess_bits = (_AP_W % APINT_BITS_PER_WORD)
@@ -3302,6 +3301,7 @@ class ap_private<_AP_W, _AP_S, false> {
   ///  for object deserialization (pair this with the static method Read).
   INLINE ap_private() {
     set_canary();
+    memset(pVal, 0, _AP_N * sizeof(uint64_t));
     clearUnusedBits();
     check_canary();
   }
