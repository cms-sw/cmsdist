##Tensorflow Common build files
BuildRequires: bazel java-env git patchelf
#Keep all requires in separate file, so that can be included in py-tensorflow too
## INCLUDE cpp-standard
## INCLUDE tensorflow-requires
## INCLUDE compilation_flags
## INCLUDE microarch_flags

#Set tensorflow_mkldnn_contraction_kernel option
#https://github.com/tensorflow/tensorflow/blob/v2.12.1/tensorflow/core/kernels/BUILD#L79-L89
%if "%{?enable_tf_mkldnn:set}" != "set"
%define  enable_tf_mkldnn 1
%endif


#Set cms_cxx_standard to 17 as LLVM downloaded by TF does not build with c++20
%if "%{cms_cxx_standard}" == "20"
%undefine cms_cxx_standard
%define cms_cxx_standard 17
%endif

Source: git+https://github.com/%{github_user}/tensorflow.git?obj=%{branch}/%{tag}&export=tensorflow-%{realversion}&output=/tensorflow-%{realversion}.tgz

%if "%{?build_type:set}" != "set"
%define build_type opt
%endif
%if "%{?tfversion:set}" != "set"
%define tfversion %{realversion}
%endif


%define majorversion %(echo %tfversion | cut -d . -f 1)

%prep

%setup -q -n tensorflow-%{realversion}
sed -i -e 's|lib/python[^/]*/site-packages/|lib/python%{cms_python3_major_minor_version}/site-packages/|'  third_party/systemlibs/pybind11.BUILD

%build

export PYTHON_BIN_PATH="$(which python3)"
export USE_DEFAULT_PYTHON_LIB_PATH=1
export GCC_HOST_COMPILER_PATH="$(which gcc)"
export CC_OPT_FLAGS="-Wno-sign-compare"

BAZEL_OPTS="--batch --output_user_root ../build"
# For Java17+
if [ $(${JAVA_HOME}/bin/java -version 2>&1 | grep -E -i 'openjdk version "[1-9]' | sed -E 's|.* "([0-9]+)[.].*|\1|') -ge 17 ] ; then
BAZEL_OPTS="$BAZEL_OPTS --host_jvm_args=--add-opens=java.base/java.nio=ALL-UNNAMED"
BAZEL_OPTS="$BAZEL_OPTS --host_jvm_args=--add-opens=java.base/java.lang=ALL-UNNAMED"
fi

BAZEL_OPTS="$BAZEL_OPTS build -s --verbose_failures --distinct_host_configuration=false"

%if "%{selected_microarch}"
BAZEL_OPTS="$BAZEL_OPTS --copt=%{selected_microarch}"
%if "%{selected_microarch}" != "%{default_microarch}"
BAZEL_OPTS="$BAZEL_OPTS --distinct_host_configuration=true"
%endif
%endif
%if "%{?arch_build_flags}"
BAZEL_OPTS="$BAZEL_OPTS $(echo %{arch_build_flags} | tr ' ' '\n' | grep -v '^$' | sed -e 's|^|--copt=|' | tr '\n' ' ')"
%else
BAZEL_OPTS="$BAZEL_OPTS --copt=-mcpu=native --copt=-mtune=native"
%endif
BAZEL_OPTS="$BAZEL_OPTS --config=%{build_type} --cxxopt=-std=c++%{cms_cxx_standard} --host_cxxopt=-std=c++%{cms_cxx_standard} %{makeprocesses}"
BAZEL_OPTS="$BAZEL_OPTS --config=noaws --config=nogcp --config=nohdfs --config=nonccl"
%if "%{enable_tf_mkldnn}" == "0"
BAZEL_OPTS="$BAZEL_OPTS --define tensorflow_mkldnn_contraction_kernel=0"
%endif
%ifarch ppc64le
BAZEL_OPTS="$BAZEL_OPTS --define tflite_with_xnnpack=false"
%endif

%if %{enable_gpu}
export GCC_HOST_COMPILER_PREFIX=${GCC_ROOT}/bin
export GCC_HOST_COMPILER_PATH=$(which gcc)
export TF_CUDA_COMPUTE_CAPABILITIES=$(echo "compute_%{cuda_arch}" | sed 's|\s\s*|,compute_|g')
export TF_CUDA_VERSION="$(echo ${CUDA_VERSION} | cut -f1,2 -d.)"
export TF_CUDA_PATHS="${CUDA_ROOT},${CUDNN_ROOT}"
export TF_CUDA_CLANG=0
export cuda=Y
%endif
export TF_NEED_CUDA=%{enable_gpu}
export TF_NEED_CLANG=0
export TF_NEED_JEMALLOC=0
export TF_NEED_HDFS=0
export TF_NEED_GCP=0
export TF_ENABLE_XLA=1
export TF_NEED_OPENCL=0
export TF_NEED_VERBS=0
export TF_NEED_MKL=0
export TF_NEED_MPI=0
export TF_NEED_S3=0
export TF_NEED_GDR=0
export TF_NEED_OPENCL_SYCL=0
export TF_SET_ANDROID_WORKSPACE=false
export TF_NEED_KAFKA=false
export TF_NEED_AWS=0
export TF_DOWNLOAD_CLANG=0
export TF_NEED_IGNITE=0
export TF_NEED_ROCM=0
export TF_NEED_TENSORRT=0
export TF_PYTHON_VERSION=%{cms_python3_major_minor_version}
export TEST_TMPDIR=%{_builddir}/build
export TF_CMS_EXTERNALS="%{_builddir}/cms_externals.txt"

echo "png:${LIBPNG_ROOT}"                   >  ${TF_CMS_EXTERNALS}
echo "libjpeg_turbo:${LIBJPEG_TURBO_ROOT}"  >> ${TF_CMS_EXTERNALS}
echo "zlib:${ZLIB_ROOT}"                    >> ${TF_CMS_EXTERNALS}
echo "eigen_archive:${EIGEN_ROOT}"          >> ${TF_CMS_EXTERNALS}
echo "curl:${CURL_ROOT}"                    >> ${TF_CMS_EXTERNALS}
#echo "com_google_protobuf:${PROTOBUF_ROOT}" >> ${TF_CMS_EXTERNALS}
echo "com_github_grpc_grpc:${GRPC_ROOT}"    >> ${TF_CMS_EXTERNALS}
echo "gif:${GIFLIB_ROOT}"                   >> ${TF_CMS_EXTERNALS}
echo "org_sqlite:${SQLITE_ROOT}"            >> ${TF_CMS_EXTERNALS}
echo "cython:"                              >> ${TF_CMS_EXTERNALS}
echo "flatbuffers:${FLATBUFFERS_ROOT}"      >> ${TF_CMS_EXTERNALS}
echo "pybind11:${PY3_PYBIND11_ROOT}"        >> ${TF_CMS_EXTERNALS}
echo "absl_py:${PY3_ABSL_PY_ROOT}"          >> ${TF_CMS_EXTERNALS}
echo "pasta:"                               >> ${TF_CMS_EXTERNALS}
echo "boringssl:"                           >> ${TF_CMS_EXTERNALS}

export TF_SYSTEM_LIBS=$(cat ${TF_CMS_EXTERNALS} | sed 's|:.*||' | tr "\n" "," | sed 's|,*$||')

echo "pypi_numpy:${PY3_NUMPY_ROOT}"         >> ${TF_CMS_EXTERNALS}

#Create local repos for pypi_* packages required by TF
tf_requirement=requirements_lock_%{cms_python3_major_version}_%{cms_python3_minor_version}.txt
for name in $( grep '^[a-zA-Z].*==' ${tf_requirement} | sed 's| *==.*||;s|-|_|g') ; do
  bfile="pypi"
  [ -f third_party/cms/${name}.BUILD ] && bfile="${name}"
  sed -i -e "s|def repos():|def pypi_${name}():\n  cms_new_local_repository(name = \"pypi_${name}\",build_file = \"//third_party/cms:${bfile}.BUILD\")\n\ndef repos():\n    pypi_${name}()|" third_party/cms/workspace.bzl
done
rm -f ${tf_requirement}; touch ${tf_requirement}

# clear the build dir and configure
if [ -d ../build ] ; then
  chmod -R u+w  ../build
  rm -rf ../build
fi

export PYTHONPATH=$PYTHON3PATH

./configure
# build tensorflow python targets
bazel $BAZEL_OPTS //tensorflow/tools/pip_package:build_pip_package
bazel $BAZEL_OPTS //tensorflow:tensorflow
bazel $BAZEL_OPTS //tensorflow:tensorflow_cc
bazel $BAZEL_OPTS //tensorflow/tools/graph_transforms:transform_graph
bazel $BAZEL_OPTS //tensorflow/compiler/tf2xla:tf2xla
bazel $BAZEL_OPTS //tensorflow/compiler/tf2xla:xla_compiler
bazel $BAZEL_OPTS //tensorflow/compiler/tf2xla:xla_compiled_cpu_function
#bazel $BAZEL_OPTS //tensorflow/compiler/aot:tfcompile
bazel $BAZEL_OPTS //tensorflow/core/profiler
bazel $BAZEL_OPTS //tensorflow:install_headers
bazel $BAZEL_OPTS //tensorflow/compiler/tf2xla:tf2xla_supported_ops

# rebuild *.pb.{h|cc} files using the external protobuf compiler
chmod -R a+rwX $PWD/bazel-bin/tensorflow/include
# create symlinks for third-party packages

for d in third_party/xla/third_party/tsl/tsl third_party/xla/xla ; do
  ln -s $d .
done
for f in $(find tensorflow -name "*.proto")
do
  protoc --cpp_out=$PWD/bazel-bin/tensorflow/include $f
done

%install

# define and create empty target directories
outdir="$PWD/out"
bindir="$outdir/bin"
incdir="$outdir/include"
libdir="$outdir/lib"
rm -rf $bindir $incdir $libdir
mkdir -p $bindir $incdir $libdir

# copy targets
srcdir="$PWD/bazel-bin/tensorflow"

cp -p $srcdir/libtensorflow*.so* $libdir/
cp -p $srcdir/compiler/tf2xla/lib*.so* $libdir/

for l in tensorflow_cc tensorflow_framework tensorflow ; do
  # check if the actual lib exists
  [ -f $libdir/lib${l}.so.%{tfversion} ] || exit 1

  # link from majorversion to tfversion
  rm -f $libdir/lib${l}.so.%{majorversion}
  ln -s lib${l}.so.%{tfversion} $libdir/lib${l}.so.%{majorversion}

  # link from default lib to majorversion
  rm -f $libdir/lib${l}.so
  ln -s lib${l}.so.%{majorversion} $libdir/lib${l}.so
done

#cp -p $srcdir/compiler/aot/tfcompile $bindir
cp -p $srcdir/compiler/tf2xla/tf2xla_supported_ops $bindir
for name in tensorflow absl re2 ; do
    cp -r -p $srcdir/include/$name $incdir
done

# copy headers from downloaded dependencies
copy_headers() {
  for header_file in $(find $1/$2 -name *.h | grep -v '_virtual_includes' | sed "s|$1/||") ; do
    header_dir="${incdir}/$(dirname ${header_file})"
    mkdir -p "${header_dir}"
    cp -p "$1/${header_file}" "${header_dir}/"
  done
}
copy_headers "$PWD" tensorflow/compiler
copy_headers "$PWD" tensorflow/core/profiler/internal
copy_headers "$PWD" tensorflow/core/profiler/lib
copy_headers "$PWD" tensorflow/core/util/tensor_bundle
copy_headers "${PWD}/bazel-bin/tensorflow/tools/pip_package/build_pip_package.runfiles/local_tsl" tsl
copy_headers "${PWD}/bazel-bin/tensorflow/tools/pip_package/build_pip_package.runfiles" ml_dtypes

pushd $outdir
  tar cfz %{i}/libtensorflow_cc.tar.gz .
popd

#FIXME: Create missing externals links
pushd bazel-tensorflow-%{realversion}/external
  srcdir=$(dirname $(readlink zlib))
  for e in ducc farmhash_gpu_archive stablehlo ; do
    echo "Check external link: $e"
    if [ -e ${srcdir}/$e ] ; then
      if [ ! -e $e ] ; then
        echo "Creating symlink ${srcdir}/$e->$e"
        ln -s ${srcdir}/$e .
      fi
    fi
  done
popd

# create the wheel file that is installed in py2-tensorflow
export PYTHONPATH=$PYTHON3PATH
bash -ex bazel-bin/tensorflow/tools/pip_package/build_pip_package %{i}
