##Tensorflow Common build files
BuildRequires: bazel java-env git
#Keep all requires in separate file, so that can be included in py-tensorflow too
## INCLUDE cpp-standard
## INCLUDE tensorflow-requires
## INCLUDE compilation_flags

Source: git+https://github.com/%{github_user}/tensorflow.git?obj=%{branch}/%{tag}&export=tensorflow-%{realversion}&output=/tensorflow-%{realversion}.tgz

%if "%{?build_type:set}" != "set"
%define build_type opt
%endif
%if "%{?pythonOnly:set}" != "set"
%define pythonOnly no
%endif

%define majorversion %(echo %realversion | cut -d . -f 1)

%prep

%setup -q -n tensorflow-%{realversion}
sed -i -e 's|lib/python[^/]*/site-packages/|lib/python%{cms_python3_major_minor_version}/site-packages/|'  third_party/systemlibs/pybind11.BUILD

%build

export PYTHON_BIN_PATH="$(which %{python_cmd})"
export USE_DEFAULT_PYTHON_LIB_PATH=1
export GCC_HOST_COMPILER_PATH="$(which gcc)"
export CC_OPT_FLAGS="-Wno-sign-compare"

BAZEL_OPTS="--batch --output_user_root ../build build -s --verbose_failures --distinct_host_configuration=false"
%ifarch x86_64
BAZEL_OPTS="$BAZEL_OPTS --copt=%{vectorize_flag}"
%else
%if "%{?arch_build_flags}"
BAZEL_OPTS="$BAZEL_OPTS $(echo %{arch_build_flags} | tr ' ' '\n' | grep -v '^$' | sed -e 's|^|--copt=|' | tr '\n' ' ')"
%else
BAZEL_OPTS="$BAZEL_OPTS --copt=-mcpu=native --copt=-mtune=native"
%endif
%endif
BAZEL_OPTS="$BAZEL_OPTS --config=%{build_type} --cxxopt=-std=c++%{cms_cxx_standard} --host_cxxopt=-std=c++%{cms_cxx_standard} %{makeprocesses}"
BAZEL_OPTS="$BAZEL_OPTS --config=noaws --config=nogcp --config=nohdfs --config=nonccl"
%ifarch ppc64le
BAZEL_OPTS="$BAZEL_OPTS --define=tflite_with_xnnpack=false --define tflite_kernel_use_xnnpack=false"
%endif

%if %{enable_gpu}
BAZEL_OPTS="$BAZEL_OPTS --config=cuda"
export GCC_HOST_COMPILER_PREFIX=${GCC_ROOT}/bin
export GCC_HOST_COMPILER_PATH=$(which gcc)
export TF_CUDA_COMPUTE_CAPABILITIES=$(echo "compute_%{cuda_arch}" | sed 's|\s\s*|,compute_|g')
export TF_CUDA_VERSION="$(echo ${CUDA_VERSION} | cut -f1,2 -d.)"
export TF_CUDA_PATHS="${CUDA_ROOT},${CUDNN_ROOT}"
export TF_CUDA_CLANG=0
export cuda=Y
%endif
export TF_NEED_CUDA=%{enable_gpu}
export TF_NEED_JEMALLOC=0
export TF_NEED_HDFS=0
export TF_NEED_GCP=0
export TF_ENABLE_XLA=0
export TF_NEED_OPENCL=0
export TF_NEED_VERBS=0
export TF_NEED_MKL=1
export TF_NEED_MPI=0
export TF_NEED_S3=0
export TF_NEED_GDR=0
export TF_NEED_OPENCL_SYCL=0
export TF_SET_ANDROID_WORKSPACE=false
export TF_NEED_KAFKA=false
export TF_NEED_AWS=0
export TF_DOWNLOAD_CLANG=0
export TF_NEED_IGNITE=0
export TF_NEED_ROCM=0
export TF_NEED_TENSORRT=0
export TEST_TMPDIR=%{_builddir}/build
export TF_CMS_EXTERNALS="%{_builddir}/cms_externals.txt"

echo "png:${LIBPNG_ROOT}"                   >  ${TF_CMS_EXTERNALS}
echo "libjpeg_turbo:${LIBJPEG_TURBO_ROOT}"  >> ${TF_CMS_EXTERNALS}
echo "zlib:${ZLIB_ROOT}"                    >> ${TF_CMS_EXTERNALS}
echo "eigen_archive:${EIGEN_ROOT}"          >> ${TF_CMS_EXTERNALS}
echo "curl:${CURL_ROOT}"                    >> ${TF_CMS_EXTERNALS}
echo "com_google_protobuf:${PROTOBUF_ROOT}" >> ${TF_CMS_EXTERNALS}
echo "com_github_grpc_grpc:${GRPC_ROOT}"    >> ${TF_CMS_EXTERNALS}
echo "gif:${GIFLIB_ROOT}"                   >> ${TF_CMS_EXTERNALS}
echo "org_sqlite:${SQLITE_ROOT}"            >> ${TF_CMS_EXTERNALS}
echo "cython:"                              >> ${TF_CMS_EXTERNALS}
echo "flatbuffers:${FLATBUFFERS_ROOT}"      >> ${TF_CMS_EXTERNALS}
echo "pybind11:${PY3_PYBIND11_ROOT}"        >> ${TF_CMS_EXTERNALS}
echo "functools32_archive:"                 >> ${TF_CMS_EXTERNALS}
echo "astor_archive:"                       >> ${TF_CMS_EXTERNALS}
echo "six_archive:"                         >> ${TF_CMS_EXTERNALS}
echo "absl_py:${PY3_ABSL_PY_ROOT}"          >> ${TF_CMS_EXTERNALS}
echo "termcolor_archive:"                   >> ${TF_CMS_EXTERNALS}
echo "typing_extensions_archive:"           >> ${TF_CMS_EXTERNALS}
echo "pasta:"                               >> ${TF_CMS_EXTERNALS}
echo "wrapt:"                               >> ${TF_CMS_EXTERNALS}
echo "gast_archive:"                        >> ${TF_CMS_EXTERNALS}
echo "org_python_pypi_backports_weakref:"   >> ${TF_CMS_EXTERNALS}
echo "opt_einsum_archive:"                  >> ${TF_CMS_EXTERNALS}
echo "boringssl:"                           >> ${TF_CMS_EXTERNALS}

export TF_SYSTEM_LIBS=$(cat ${TF_CMS_EXTERNALS} | sed 's|:.*||' | tr "\n" "," | sed 's|,*$||')

# clear the build dir and configure
if [ -d ../build ] ; then
  chmod -R u+w  ../build
  rm -rf ../build
fi
./configure

#Generate Python wrappers so that we can use PYTHON*PATH env
rm -rf %{_builddir}/cms-pytool ; mkdir %{_builddir}/cms-pytool
echo '#!/bin/bash'                             > %{_builddir}/cms-pytool/python3
echo "export PYTHON3PATH=\"${PYTHON3PATH}\""  >> %{_builddir}/cms-pytool/python3
echo "$(which python3) \"\$@\""               >> %{_builddir}/cms-pytool/python3

chmod +x %{_builddir}/cms-pytool/python3
ln -s python3 %{_builddir}/cms-pytool/python
export PATH=%{_builddir}/cms-pytool:$PATH

# build tensorflow python targets
bazel $BAZEL_OPTS //tensorflow/tools/pip_package:build_pip_package

%if "%{pythonOnly}" == "no"
bazel $BAZEL_OPTS //tensorflow:tensorflow
bazel $BAZEL_OPTS //tensorflow:tensorflow_cc
bazel $BAZEL_OPTS //tensorflow/tools/graph_transforms:transform_graph
bazel $BAZEL_OPTS //tensorflow/compiler/tf2xla:tf2xla
bazel $BAZEL_OPTS //tensorflow/compiler/xla:cpu_function_runtime
bazel $BAZEL_OPTS //tensorflow/compiler/xla:executable_run_options
bazel $BAZEL_OPTS //tensorflow/compiler/tf2xla:xla_compiled_cpu_function
#bazel $BAZEL_OPTS //tensorflow/compiler/aot:tfcompile
bazel $BAZEL_OPTS //tensorflow/core/profiler
bazel $BAZEL_OPTS //tensorflow:install_headers

# rebuild *.pb.{h|cc} files using the external protobuf compiler
chmod -R a+rwX $PWD/bazel-bin/tensorflow/include
for f in $(find tensorflow -name "*.proto")
do
  protoc --cpp_out=$PWD/bazel-bin/tensorflow/include $f
done
%endif

%install

%if "%{pythonOnly}" == "no"

# define and create empty target directories
outdir="$PWD/out"
bindir="$outdir/bin"
incdir="$outdir/include"
libdir="$outdir/lib"
rm -rf $bindir $incdir $libdir
mkdir -p $bindir $incdir $libdir

# copy targets
srcdir="$PWD/bazel-bin/tensorflow"

cp -p $srcdir/libtensorflow*.so* $libdir/
cp -p $srcdir/compiler/tf2xla/lib*.so* $libdir/
cp -p $srcdir/compiler/xla/lib*.so* $libdir/

for l in tensorflow_cc tensorflow_framework tensorflow ; do
  # check if the actual lib exists
  [ -f $libdir/lib${l}.so.%{realversion} ] || exit 1

  # link from majorversion to realversion
  rm -f $libdir/lib${l}.so.%{majorversion}
  ln -s lib${l}.so.%{realversion} $libdir/lib${l}.so.%{majorversion}

  # link from default lib to majorversion
  rm -f $libdir/lib${l}.so
  ln -s lib${l}.so.%{majorversion} $libdir/lib${l}.so
done

#cp -p $srcdir/compiler/aot/tfcompile $bindir
for name in tensorflow absl re2 third_party ; do
    cp -r -p $srcdir/include/$name $incdir
done

# copy headers from downloaded dependencies
copy_headers() {
  for header_file in $(find $1/$2 -name *.h | sed "s|$1/||") ; do
    header_dir="${incdir}/$(dirname ${header_file})"
    mkdir -p "${header_dir}"
    cp -p "${header_file}" "${header_dir}/"
  done
}
copy_headers "$PWD" tensorflow/compiler
copy_headers "$PWD" tensorflow/core/profiler/internal
copy_headers "$PWD" tensorflow/core/profiler/lib
copy_headers "$PWD" tensorflow/core/util/tensor_bundle

# do not copy the protobuf headers as we use the version in cmsdist
# copy_headers "$PWD/tensorflow/contrib/makefile/downloads/protobuf/src" google

pushd $outdir
  tar cfz %{i}/libtensorflow_cc.tar.gz .
popd

%endif

#FIXME: for some reason farmhash_gpu.h is a broken symlink
optdir=$(ls -d $PWD/bazel-out/*-%{build_type})
if [ -L ${optdir}/bin/external/farmhash_gpu_archive/_virtual_includes/farmhash_gpu/third_party/farmhash_gpu/src/farmhash_gpu.h ] ; then
  if [ ! -e ${optdir}/bin/external/farmhash_gpu_archive/_virtual_includes/farmhash_gpu/third_party/farmhash_gpu/src/farmhash_gpu.h ] ; then
    ln -sf ${optdir}/bin/tensorflow/tools/pip_package/build_pip_package.runfiles/org_tensorflow/external/farmhash_gpu_archive/src/farmhash_gpu.h \
       ${optdir}/bin/external/farmhash_gpu_archive/_virtual_includes/farmhash_gpu/third_party/farmhash_gpu/src/farmhash_gpu.h
  fi
fi

# create the wheel file that is installed in py2-tensorflow
bazel-bin/tensorflow/tools/pip_package/build_pip_package %{i}
