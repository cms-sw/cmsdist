### FILE scramv1-tool-conf
## NOCOMPILER
## BUILDREQUIRE-TOOLFILE
Requires: gmake-toolfile
BuildRequires: SCRAMV1
Source: none
%define online %(case %cmsplatf in (*onl_*_*) echo true;; (*) echo false;; esac)
%define CheckScramTools \
  uctool=`echo $tool | tr '[a-z-]' '[A-Z_]'` \
  toolbase=`eval echo \\\\$${uctool}_ROOT` \
  [ -d ${SCRAM_TOOLS_ROOT}/scram-tools/$tool ] || continue

%define CopyScramTools \
  echo ">> Copying tool files from: $tool" \
  for xml in $(find ${SCRAM_TOOLS_ROOT}/scram-tools/$tool -type f -name "*.xml") ; do \
    bxml=$(basename $xml | tr '[A-Z]' '[a-z]') \
    [ -f %i/tools/selected/$bxml ] && continue \
    [ -f %i/tools/available/$bxml ] && continue \
    cp $xml %i/tools/selected/${bxml} \
    T_VERSION=`eval echo \\\\$${uctool}_VERSION` \
    sed -i -e 's|@TOOL_ROOT@|'"$toolbase"'|g' %i/tools/selected/${bxml} \
    sed -i -e 's|@TOOL_VERSION@|'"$T_VERSION"'|g' %i/tools/selected/${bxml} \
    echo "  Copied $bxml" \
  done \
  tool_script=${SCRAM_TOOLS_ROOT}/scram-tools/$tool/$(echo $tool | tr '[A-Z]' '[a-z]').sh \
  if [ -f $tool_script ]; then ($tool_script %i/tools/selected); fi
%prep
%build

# This is a generic template to collect SCRAMToolBox toolfiles of all the tools
# and generate CMSconfiguration, tools-STANDALONE.conf and requirements file
#
#   requiredtools	Tools for which we need to collect the SCRAMToolBox toolfiles
#                  	(This is automatically set by install.sh script)
#   skipreqtools	Do not add these tools in selected directory

%install
rm -rf %i
mkdir -p %i/tools/selected %i/tools/available

%if "%{?systemtools:set}" != "set"
%define systemtools %{nil}
%endif

%if "%{?skipreqtools:set}" != "set"
%define skipreqtools %{nil}
%endif

%if "%{?package_vectorization}" != ""
PKG_VECTORIZATION=`echo %package_vectorization`
export PKG_VECTORIZATION
%endif

COMP_ARCH_SPECIFIC_FLAGS=""
%ifarch x86_64
COMP_ARCH_SPECIFIC_FLAGS=$(for v in %package_vectorization ; do %{cmsdist_directory}/vectorization/cmsdist_packages.py ${v} ; done)
%endif
%ifarch aarch64
COMP_ARCH_SPECIFIC_FLAGS="-fsigned-char -fsigned-bitfields"
%endif
%ifarch ppc64le
COMP_ARCH_SPECIFIC_FLAGS="-fsigned-char -fsigned-bitfields %ppc64le_build_flags"
%endif
export COMP_ARCH_SPECIFIC_FLAGS

DoneTools=" "
SkipTools=
for tool in %requiredtools; do
  wot=`echo $tool | sed 's|-tool-conf$||'`
  [ "X$tool" == "X$wot" ] && continue
  uctool=`echo $tool | tr '[a-z-]' '[A-Z_]'`
  toolbase=`eval echo \\$${uctool}_ROOT`
  [ -d $toolbase/tools/selected ] || continue
  [ -d $toolbase/tools/available ] || continue
  DoneTools="$DoneTools $tool "
  echo ">> Copying tool files from: $tool"
  find $toolbase/tools/selected -type f -exec cp {} %i/tools/selected \;
  find $toolbase/tools/available -type f -exec cp {} %i/tools/available \;
done
for tool in %requiredtools %buildrequiredtools %systemtools ${PKGTOOLS_SYSTEM_TOOLS} ; do
  wot=`echo $tool | sed 's|-toolfile$||'`
  [ "X$tool" == "X$wot" ] && SkipTools="${SkipTools}${tool} " && continue
  %{CheckScramTools}
  DoneTools="$DoneTools $wot "
  %{CopyScramTools}
done
for tool in $SkipTools ; do
  [ "X`echo $DoneTools | tr ' ' '\n' | grep ^$tool$`" == "X" ] || continue
  %{CheckScramTools}
  %{CopyScramTools}
done

for stool in $(echo %skipreqtools | tr '[A-Z]' '[a-z]') ; do
  [ -f %i/tools/selected/${stool}.xml ] || continue
  mv %i/tools/selected/${stool}.xml %i/tools/available
done
  
if [ -e $SCRAMV1_ROOT/bin/chktool ] ; then
  find %i/tools -name '*.xml' -type f | (xargs $SCRAMV1_ROOT/bin/chktool > %i/errors.log 2>&1 || true)
  ToolErrors=`cat %i/errors.log | wc -l | awk '{print $1}'`
  if [ "X$ToolErrors" != "X0" ] ; then
    cat %i/errors.log
    exit 1
  fi
  rm -f %i/errors.log
fi

py27List=`echo ${PYTHON27PATH} | tr ':' '\n'`

mkdir -p %{i}/${PYTHON_LIB_SITE_PACKAGES}
touch %{i}/${PYTHON_LIB_SITE_PACKAGES}/tool-deps.pth
for pkg in ${py27List} ; do
   echo "adding $pkg"
   echo "$pkg" >> %{i}/${PYTHON_LIB_SITE_PACKAGES}/tool-deps.pth
done
echo '<tool name="python-paths" version="1.0">' > %{i}/tools/selected/python-paths.xml
echo '  <runtime name="PYTHON27PATH"  value="%{i}/'${PYTHON_LIB_SITE_PACKAGES}'" type="path"/>' >> %{i}/tools/selected/python-paths.xml

if [ "${PYTHON3PATH}" != "" ] ; then
  py3List=`echo ${PYTHON3PATH} | tr ':' '\n'`
  mkdir -p %{i}/${PYTHON3_LIB_SITE_PACKAGES}
  touch %{i}/${PYTHON3_LIB_SITE_PACKAGES}/tool-deps.pth
  for pkg in ${py3List} ; do
     echo "adding $pkg"
     echo "$pkg" >> %{i}/${PYTHON3_LIB_SITE_PACKAGES}/tool-deps.pth
  done
  echo '  <runtime name="PYTHON3PATH"  value="%{i}/'${PYTHON3_LIB_SITE_PACKAGES}'" type="path"/>' >> %{i}/tools/selected/python-paths.xml
fi

echo '</tool>' >> %{i}/tools/selected/python-paths.xml

ALL_PY_BIN=""
ALL_PY_BIN_PKGS=""
for pkg in  $(echo %{allpkgreqs} | tr ' ' '\n' | grep -v '\-toolfile/' | grep '/py[23]-') ; do
  pk_name=$(echo $pkg | cut -d/ -f2 | tr '[A-Z]' '[a-z]')
  if [ -f %{i}/tools/selected/${pk_name}.xml ] ; then continue ; fi
  pk_ver=$(echo $pkg | cut -d/ -f3)
  uctool=`echo ${pk_name} | tr '[a-z-]' '[A-Z_]'`
  echo "<tool name=\"$pk_name\" version=\"$pk_ver\">" > %{i}/tools/selected/${pk_name}.xml
  if [ -e %{cmsroot}/%{cmsplatf}/$pkg/bin ] ; then
    for b in $(ls %{cmsroot}/%{cmsplatf}/$pkg/bin) ; do
      ALL_PY_BIN="${ALL_PY_BIN} ${b}"
      ALL_PY_BIN_PKGS="${ALL_PY_BIN_PKGS} ${b}:${pk_name}"
    done
    echo "  <client>" >> %{i}/tools/selected/${pk_name}.xml
    echo "    <environment name=\"${uctool}_BASE\" default=\"%{cmsroot}/%{cmsplatf}/$pkg\"/>" >> %{i}/tools/selected/${pk_name}.xml
    echo "  </client>" >> %{i}/tools/selected/${pk_name}.xml
    echo "  <runtime name=\"PATH\" value=\"\$${uctool}_BASE/bin\" type=\"path\"/>" >> %{i}/tools/selected/${pk_name}.xml
  fi
  echo "</tool>" >> %{i}/tools/selected/${pk_name}.xml
done
DUP_BIN=$(echo "${ALL_PY_BIN}" | tr ' ' '\n' | sort | uniq -c | sed 's|^\s*||' | grep -v '^1 ' | sed 's|^.* ||')

echo "echoing the install path"
echo %i

set +x
if [ "${DUP_BIN}" != "" ] ; then
  for p in ${DUP_BIN} ; do
    echo ${ALL_PY_BIN_PKGS} | tr ' ' '\n' | grep "^${p}:"
  done
  echo "ERROR: Duplicate python binaries found. Please cleanup and make sure only one binary is available."
  exit 1
fi
set -x

#vectorized packages
%if "%{?vectorized_packages}" != ""
for vect_package in  %vectorized_packages; do
    echo $vect_package
    package_uc=$(echo $vect_package | tr '[a-z-]' '[A-Z_]')
    r=""
    #echo $package_uc
    for v in $(echo %{package_vectorization} | tr '[a-z-]' '[A-Z_]'); do
    	r=$r"    <environment name=\"${v}_LIBDIR\" default=\""
	r=$r'\$'
	r=$r${package_uc}_${v}_ROOT/lib"\" type=\"path\"/>\n"
    	#echo $v
    done
    r=$r'</client>'
    perl -p -i -e "s|</client>|${r}|g" %i/tools/selected/$(echo $vect_package | tr '[A-Z]' '[a-z]').xml
done
%endif

%post

%{relocateCmsFiles} $(find $RPM_INSTALL_PREFIX/%{pkgrel}/tools -type f)
%{relocateCmsFiles} $(find $RPM_INSTALL_PREFIX/%{pkgrel}/lib -type f)
