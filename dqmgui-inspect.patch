From a1de363d9273739d10854f9ee678f11cd4f129cb Mon Sep 17 00:00:00 2001
From: Marco Rovere <marco.rovere@cern.ch>
Date: Mon, 12 Oct 2015 18:48:12 +0200
Subject: [PATCH] Fix checksum on "binary" imported modules.

The way in which the inspect module works changed and, in case we
import a "binary" module, like our Accelerator one, an exception is
thrown even if the source code of that module is present. This PR is a
quick and dirty, relatively clean way, to go around the problem. With
this, the server is happily starting. The proper fix, most likely,
should be implemented in the buggy inspect module.

Also, the import_module local function has been dropped and the one
imported from the importlib module is used.

fix
---
 src/python/Core/GUI.py | 32 ++++++++++++++++++++------------
 1 file changed, 20 insertions(+), 12 deletions(-)

diff --git a/src/python/Core/GUI.py b/src/python/Core/GUI.py
index 5cc6e14..a9969a2 100644
--- a/src/python/Core/GUI.py
+++ b/src/python/Core/GUI.py
@@ -7,6 +7,8 @@
 # interpreter yields the lock only every N byte code instructions;
 # this server configures a large N (1'000'000).
 
+from importlib import import_module
+from imp import get_suffixes
 from copy import deepcopy
 from cgi import escape
 from socket import gethostname
@@ -27,13 +29,6 @@
                      + "<body><noscript>Please enable JavaScript to use this"
                      + " service</noscript></body></html>")
 
-def import_module(name):
-  mod = __import__(name)
-  for part in name.split('.')[1:]:
-    mod = getattr(mod, part, None)
-    if not mod: break
-  return mod
-
 def extension(modules, what, *args):
   for m in modules:
     ctor = getattr(m, what, None)
@@ -267,11 +262,24 @@ def __init__(self, cfgfile, cfg, modules):
            and name.rsplit(".", 1)[-1][0].isupper())
           or name == "__main__") \
 	 and m and m.__dict__.has_key('__file__'):
-        self._addChecksum(name,
-			  inspect.getsourcefile(m) \
-			  or inspect.getabsfile(m)
-			  or name,
-			  inspect.getsource(m))
+        processed = False
+        # Check if the module is a binary module, since this needs a
+        # special handling in python 2.7 (due to buggy handling of
+        # binary modules and the inspect module )
+        for suffix, mode, kind in get_suffixes():
+          source = inspect.getabsfile(m)
+          if 'b' in mode and source.lower()[-len(suffix):] == suffix:
+            if os.path.exists(source) and os.stat(source):
+              data = open(source, 'rb').read()
+              self._addChecksum(name, source, data)
+              processed = True
+              break
+        if not processed:
+            self._addChecksum(name,
+                              inspect.getsourcefile(m) \
+                              or inspect.getabsfile(m)
+                              or name,
+                              inspect.getsource(m))
 
     self.sessionthread.start()
     engine.subscribe('stop', self.sessionthread.stop)
