### FILE rpm-preamble

#When build with non-empty buildroot rpm runs some post scripts
#to strip the binary. Following two definition avoid running those
#scripts. These scripts were not doing anything in past as we always
#built with empty buildroot.
%define __os_install_post   %{nil}
%define __spec_install_post %{nil}

# Preliminarily define where things go.  These are the places we
# know even without knowing the architecture yet.  In particular
# we need %_specdir to find "cmsos" to determine the architecture.
# Note that we define the values all here, but some of them are
# not actually usable until we've managed to defined %cmsplatf.
#
# "instroot" is the root of the private RPM package tree, it gets
# both the RPM database as well as all the packages into it.  It
# also has all the RPM standard dirs in it: SPECS, SOURCES, BUILD,
# RPMS, SRPMS.  However we fudge those significantly to make sure
# there is no chance data from packages or different platforms can
# ever mix.
#
# Under the "instroot" there are other subtrees: external, lcg, cms.
# External software is installed under the first, while LHC software
# releases go under the others.  Which tree is used is determined by
# install.sh from the group the spec belongs to.
#
# The default installation root is "/cms".  This can be changed,
# e.g. from RPM command line, but currently only up to producing
# binary RPMs.  The binaries are not relocatable (yet?).
%if "%{?instroot:set}" != "set"
%define instroot	/cms
%endif

%if "%{?cmsroot:set}" != "set"
%define cmsroot        %instroot
%endif

%if "%{?tempprefix:set}" != "set"
%define tempprefix        tmp
%endif

%if "%{?allpkgreqs:set}" != "set"
%define allpkgreqs       %{pkgreqs}
%endif

%if "%{?builddirectpkgreqs:set}" != "set"
%define builddirectpkgreqs       %{nil}
%endif

# We define cmsbuildApiVersion to be 0 in the case we are not using 
# a recent enough version of cmsBuild/install.sh, which does not
# set cmsbuildApiVersion.
%if "%{?cmsbuildApiVersion:set}" != "set"
%define cmsbuildApiVersion 0
%endif

%define pkgdir		%{pkgcategory}/%{n}/%{v}

# Architecture comes first by default.  Run with "--define 'archfirst no'"
# to change this.
%if "%{?archfirst:set}" != "set"
%define archfirst	yes
%endif

%if "%archfirst" == "yes"
%define pkgrel		%{cmsplatf}/%{pkgdir}
%else
%define pkgrel		%{pkgdir}/%{cmsplatf}
%endif

%define pkginstroot	%{instroot}/%{pkgrel}

#define _rpmdbdir	%{cmsroot}/RPMDB
%define _sourcedir	%{cmsroot}/SOURCES/%{pkgdir}
%define _builddir	%{cmsroot}/BUILD/%{cmsplatf}/%{pkgdir}
%define _specdir	%{cmsroot}/SPECS/%{pkgdir}
# The new cmsBuild script puts packages in a directory structure that
# includes the package checksum. This way it is possible to decide
# what spec was used to build a given package.
%if "%cmsbuildApiVersion" == "0"
%define _rpmdir     %{cmsroot}/RPMS
%define _srcrpmdir  %{cmsroot}/SRPMS
%else
%define _rpmdir     %{cmsroot}/RPMS/cache/%{specchecksum}
%define _srcrpmdir  %{cmsroot}/SRPMS/cache/%{specchecksum}
%endif
%define _tmppath	%{cmsroot}/%{tempprefix}
%define _topdir		%{cmsroot}

%define _rpmfilename	%{cmsplatf}/%%{name}-%%{version}-%%{release}.%{cmsplatf}.rpm
%define _srpmfilename	%%{name}-%%{version}-%%{release}.src.rpm



# Force use of system gcc on darwin.  Set/unset as necessary -- but
# then make sure the right compiler gets picked up in the environment
# by setting $PATH and $LD_LIBRARY_PATH correctly.
%ifos darwin
%define is_darwin true
%endif

%if "%{?is_darwin:set}-%gccver" == "set-4.2.1"
%define use_system_gcc true
%endif

# Old version of install.sh/cmsBuild.sh did not set the cmscompiler variable,
# while cmsBuild does, in order to support compilers different other than
# gcc. For this reason we add a check to avoid setting cmscompiler in 
# the case we are using the new cmsBuild script. 
%if "%{?cmscompiler:set}" != "set"
%define cmscompiler	gcc
%endif

#set cmscompilerv only if not already set by cmsBuild
%if "%{?cmscompilerv:set}" != "set"
# Guess compiler version.  "gccver" is defined by install.sh when
# producing the spec file from the version of the gcc spec.
%if "%cmscompiler" == "gcc"
%if "%{?use_system_gcc:set}" == "set"
%{expand:%%define cmscompilerv	%(gcc --version | head -1 | cut -d' ' -f3 | cut -d. -f1,2,3 | tr -d .)}
%else
%{expand:%%define cmscompilerv	%(echo %gccver | cut -d. -f1,2,3 | tr -d .)}
%endif
%endif

%if "%cmscompiler" != "gcc"
%{expand:%%define cmscompilerv %(echo %compilerRealVersion | cut -d. -f1,2 | tr -d .)}
%endif
%endif

# Define compiler platform version strings.  We use an external
# script to determine platform name as RPM doesn't support multi-
# line macros in spec files, only in "rpmmacros" files.
%define debugsuffix %{?debug_build:_dbg}
%define cmscomp	    	%{cmscompiler}%{cmscompilerv}

#set cmsos only if cmsBuild does not set it
%if "%{?cmsos:set}" != "set"
# Old versions of cmsBuild/install.sh used to keep cmsos script in
# _specdir rather than in _sourcedir. This makes sure that
# rpm-preamble works for boths.
%if "%{cmsbuildApiVersion}" == "0"
%{expand:%%define cmsos %(sh %_specdir/cmsos)}
%else
%{expand:%%define cmsos	%(sh %_sourcedir/cmsos)}
%endif
%endif

%define cmsplatf    	%{cmsos}_%{cmscomp}%{debugsuffix}

# Define the variable name for dynamic linker search path.
%ifos darwin
%define dynamic_path_var DYLD_FALLBACK_LIBRARY_PATH
%else
%define dynamic_path_var LD_LIBRARY_PATH
%endif

# We are now done with locations.  Move to other things.

# Disable for Fedora
%define __check_files   %{nil}
%define debug_package   %{nil}

# define ARCH %{cmsplatf}?
# No BuildRoot
# No %buildsubdir
# No Distribution:
# No DistURL:
# No %_excludedocs
# No Packager:
# No Provides:
# FIXME need %make -> gmake/make as appropriate?

# This little magic incantation figures out "Requires" from this
# spec itself.  This allows us to handle (see below) those and
# only those packages the build on this platform actually needs.
# We protect against recursive expansion of "pkgreqs", otherwise
# this is pretty obvious -- it works because of strict control
# over directories so we always know where our spec file is.

%if "%{?use_ccache:set}" == "set"
%define ccache_define --define "use_ccache true"
%else
%define ccache_define %{nil}
%endif

%if "%{?use_distcc:set}" == "set"
%define distcc_define --define "use_distcc true"
%else
%define distcc_define %{nil}
%endif

# Define a little helper scriptlet to source package inits from other
# packages.  This allows cross-package environment setup to work while
# building.  See above how we determine the list by parsing the spec
# itself.
%if "%archfirst" == "yes"
%define initenv_all	for x in %{allpkgreqs}                          .; do i=%{cmsroot}/%{cmsplatf}/$x/etc/profile.d/init.sh; [ -f $i ] && . $i; done
%define initenv_direct	for x in %{directpkgreqs} %{builddirectpkgreqs} .; do i=%{cmsroot}/%{cmsplatf}/$x/etc/profile.d/init.sh; [ -f $i ] && . $i; done
%else
%define initenv_all	for x in %{allpkgreqs}                          .; do i=%{cmsroot}/$x/%{cmsplatf}/etc/profile.d/init.sh; [ -f $i ] && . $i; done
%define initenv_direct	for x in %{directpkgreqs} %{builddirectpkgreqs} .; do i=%{cmsroot}/$x/%{cmsplatf}/etc/profile.d/init.sh; [ -f $i ] && . $i; done
%endif
%define initenv		%initenv_all

%if "%{?compiling_processes:set}" == "set"
%define makeprocesses -j %compiling_processes 
%else
%define makeprocesses %{nil}
%endif

%if "%{?ignore_compile_errors:set}" == "set"
%define compileOptions -k
%else
%define compileOptions %{nil}
%endif

# Define a macro for relocating configuration files in %%post section.
%define relocateCmsFiles	perl -p -i -e "s|\\Q%{instroot}\\E|%{cmsroot}|g;s|\\Q%{cmsroot}\\E|$CMS_INSTALL_PREFIX|g"
%define relocateRpmFiles	perl -p -i -e "s|\\Q%{instroot}\\E|%{cmsroot}|g;s|\\Q%{cmsroot}\\E|$RPM_INSTALL_PREFIX|g"
%define reRelocateRpmFiles	perl -p -i -e "s|\\Q$CMS_INSTALL_PREFIX\\E|$RPM_INSTALL_PREFIX|g"
%define reRelocateRpmPkg	perl -p -i -e "s|\\Q$CMS_INSTALL_PREFIX\\E|$RPM_INSTALL_PREFIX|g" $RPM_INSTALL_PREFIX/%{pkgrel}/
%define relocateRpmPkg		perl -p -i -e "s|\\Q%{instroot}\\E|%{cmsroot}|g;s|\\Q%{cmsroot}\\E|$RPM_INSTALL_PREFIX|g" $RPM_INSTALL_PREFIX/%{pkgrel}/
%define relocateCmsPkg		perl -p -i -e "s|\\Q%{instroot}\\E|%{cmsroot}|g;s|\\Q%{cmsroot}\\E|$CMS_INSTALL_PREFIX|g" $RPM_INSTALL_PREFIX/%{pkgrel}/
%define relocateConfig		%relocateCmsPkg

# On macosx one needs to use the -x option, to avoid excessive stripping.
%ifos darwin
%define strip strip -x
%else
%define strip strip
%endif

# Define a macro for adding dependencies
%define addDependency \
mkdir -p %{pkginstroot}/etc/profile.d \
: > %{pkginstroot}/etc/profile.d/dependencies-setup.sh \
: > %{pkginstroot}/etc/profile.d/dependencies-setup.csh \
for tool in \$(echo %{requiredtools} | sed -e's|\s+| |;s|^\s+||'); do \
  root=\$(echo \$tool | tr a-z- A-Z_)_ROOT; eval r=\\\$\$root \
  if [ X"$r" != X ] && [ -r "$r/etc/profile.d/init.sh" ]; then \
    echo "test X\\\$\$root != X || . $r/etc/profile.d/init.sh" >> %{pkginstroot}/etc/profile.d/dependencies-setup.sh \
    echo "test X\\\$?\$root = X1 || source $r/etc/profile.d/init.csh" >> %{pkginstroot}/etc/profile.d/dependencies-setup.csh \
  fi \
done

# Define a macro for fixing python3 path relocation
%define py3PathRelocation \
for f in `find %{pkginstroot} -type f`; do \
    if [ -f $f ]; then \
        perl -p -i -e 's{.*}{#!/usr/bin/env python3} if $. == 1 && m{#!.*/bin/python.*}' $f \
    fi \
done
