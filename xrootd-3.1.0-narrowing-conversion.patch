diff --git a/src/XrdCms/XrdCmsManager.cc b/src/XrdCms/XrdCmsManager.cc
index d7f1a01..131df9b 100644
--- a/src/XrdCms/XrdCmsManager.cc
+++ b/src/XrdCms/XrdCmsManager.cc
@@ -153,7 +153,8 @@ void XrdCmsManager::Inform(const char *What, struct iovec *vP, int vN, int vT)
 void XrdCmsManager::Inform(XrdCms::CmsReqCode rCode, int rMod,
                                   const char *Arg,  int Alen)
 {
-    CmsRRHdr Hdr = {0, rCode, rMod, htons(static_cast<unsigned short>(Alen))};
+    CmsRRHdr Hdr = {0, static_cast<unsigned char>(rCode), static_cast<unsigned char>(rMod), 
+                    htons(static_cast<unsigned short>(Alen))};
     struct iovec ioV[2] = {{(char *)&Hdr, sizeof(Hdr)},{(char *)Arg, Alen}};
 
     Inform(Router.getName((int)rCode), ioV, (Arg ? 2 : 1), Alen+sizeof(Hdr));
diff --git a/src/XrdCms/XrdCmsNode.cc b/src/XrdCms/XrdCmsNode.cc
index ca0002c..fe65491 100644
--- a/src/XrdCms/XrdCmsNode.cc
+++ b/src/XrdCms/XrdCmsNode.cc
@@ -1168,7 +1168,8 @@ void XrdCmsNode::do_StateDFS(XrdCmsBaseFR *rP, int rc)
 {
    EPNAME("StateDFs");
    static const SMask_t allNodes(~0);
-   CmsRRHdr Request = {rP->Sid, 0, rP->Mod | kYR_raw};
+   CmsRRHdr Request = {rP->Sid, static_cast<unsigned char>(0), 
+                       static_cast<unsigned char>(rP->Mod | kYR_raw)};
    XrdCmsSelect Sel(0, rP->Path, rP->PathLen);
    int isNew;
 
diff --git a/src/XrdCms/XrdCmsReq.cc b/src/XrdCms/XrdCmsReq.cc
index 1eb944e..1094c7f 100644
--- a/src/XrdCms/XrdCmsReq.cc
+++ b/src/XrdCms/XrdCmsReq.cc
@@ -347,7 +347,7 @@ void XrdCmsReq::Reply(       int    respCode, unsigned int respVal,
                       struct iovec *iov,      int iovnum)
 {
    EPNAME("Reply");
-   CmsResponse Resp = {{ReqID, respCode, 0, 0}, htonl(respVal)};
+   CmsResponse Resp = {{ReqID, static_cast<unsigned char>(respCode), 0, 0}, htonl(respVal)};
    struct iovec myiov[2], *iovP;
    XrdCmsNode *nP;
 
diff --git a/src/XrdCms/XrdCmsTalk.cc b/src/XrdCms/XrdCmsTalk.cc
index 7c00f3b..9f9c635 100644
--- a/src/XrdCms/XrdCmsTalk.cc
+++ b/src/XrdCms/XrdCmsTalk.cc
@@ -103,7 +103,7 @@ const char *XrdCmsTalk::Respond(XrdLink *Link, XrdCms::CmsRspCode rcode,
                                 char    *buff, int                blen)
 {
    static const unsigned short ovhd = sizeof(kXR_unt32);
-   CmsResponse Resp = {{0, rcode, 0,
+   CmsResponse Resp = {{0, static_cast<unsigned char>(rcode), 0,
                         htons(static_cast<unsigned short>(blen+ovhd))}, 0};
    struct iovec ioV[2] = {{(char *)&Resp, sizeof(Resp)},
                           {         buff, blen}};
diff --git a/src/XrdFrm/XrdFrmConfig.cc b/src/XrdFrm/XrdFrmConfig.cc
index 189812f..d8e7a2b 100644
--- a/src/XrdFrm/XrdFrmConfig.cc
+++ b/src/XrdFrm/XrdFrmConfig.cc
@@ -1133,7 +1133,7 @@ int XrdFrmConfig::Grab(const char *var, char **Dest, int nosubs)
 XrdOucTList *XrdFrmConfig::InsertPL(XrdOucTList *pL, const char *Path,
                                     int Plen, int isRW)
 {
-   short sval[4] = {isRW, Plen};
+   int sval[4] = {isRW, Plen};
    XrdOucTList *pP = 0, *tP = pL;
 
 // Find insertion point
diff --git a/src/XrdSut/XrdSutAux.cc b/src/XrdSut/XrdSutAux.cc
index d4300bf..db4a98d 100644
--- a/src/XrdSut/XrdSutAux.cc
+++ b/src/XrdSut/XrdSutAux.cc
@@ -598,7 +598,7 @@ XrdSutFileLocker::XrdSutFileLocker(int fd, ELockType lock)
    fdesk = fd;
 
    // Exclusive lock of the whole file
-   int lockmode = (lock == XrdSutFileLocker::kExcl) ? (F_WRLCK | F_RDLCK)
+   short int lockmode = (lock == XrdSutFileLocker::kExcl) ? (F_WRLCK | F_RDLCK)
                                                     :  F_RDLCK;
 #ifdef __macos__
    struct flock flck = {0, 0, 0, lockmode, SEEK_SET};
diff --git a/src/XrdSut/XrdSutPFile.cc b/src/XrdSut/XrdSutPFile.cc
index 5d0bf15..6c8d519 100644
--- a/src/XrdSut/XrdSutPFile.cc
+++ b/src/XrdSut/XrdSutPFile.cc
@@ -378,7 +378,7 @@ kXR_int32 XrdSutPFile::Open(kXR_int32 opt, bool *wasopen,
 
    //
    // Shared or exclusive lock of the whole file
-   int lockmode = (opt > 0) ? (F_WRLCK | F_RDLCK) : F_RDLCK;
+   short int lockmode = (opt > 0) ? (F_WRLCK | F_RDLCK) : F_RDLCK;
    int lck = kMaxLockTries;
    int rc = 0;
    while (lck && rc == -1) {
