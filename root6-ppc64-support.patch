diff --git a/bindings/pyroot/src/Executors.cxx b/bindings/pyroot/src/Executors.cxx
index e34f5de..ae61443 100644
--- a/bindings/pyroot/src/Executors.cxx
+++ b/bindings/pyroot/src/Executors.cxx
@@ -177,6 +177,15 @@ PyObject* PyROOT::TShortExecutor::Execute(
 }
 
 ////////////////////////////////////////////////////////////////////////////////
+/// execute <method> with argument <self, ctxt>, construct python unsigned short return value
+
+PyObject* PyROOT::TUShortExecutor::Execute(
+      Cppyy::TCppMethod_t method, Cppyy::TCppObject_t self, TCallContext* ctxt )
+{
+   return PyLong_FromUnsignedLong( (UShort_t)GILCallH( method, self, ctxt ) );
+}
+
+////////////////////////////////////////////////////////////////////////////////
 /// execute <method> with argument <self, ctxt>, construct python long return value
 
 PyObject* PyROOT::TLongExecutor::Execute(
@@ -186,6 +195,16 @@ PyObject* PyROOT::TLongExecutor::Execute(
 }
 
 ////////////////////////////////////////////////////////////////////////////////
+/// execute <method> with argument <self, ctxt>, construct python unsigned short return value
+
+PyObject* PyROOT::TUIntExecutor::Execute(
+      Cppyy::TCppMethod_t method, Cppyy::TCppObject_t self, TCallContext* ctxt )
+{
+   return PyLong_FromUnsignedLong( (UInt_t)GILCallI( method, self, ctxt ) );
+}
+
+
+////////////////////////////////////////////////////////////////////////////////
 /// execute <method> with argument <self, ctxt>, construct python unsigned long return value
 
 PyObject* PyROOT::TULongExecutor::Execute(
@@ -761,9 +780,11 @@ namespace {
    PYROOT_EXECUTOR_FACTORY( UCharRef )
    PYROOT_EXECUTOR_FACTORY( UCharConstRef )
    PYROOT_EXECUTOR_FACTORY( Short )
+   PYROOT_EXECUTOR_FACTORY( UShort )
    PYROOT_EXECUTOR_FACTORY( ShortRef )
    PYROOT_EXECUTOR_FACTORY( UShortRef )
    PYROOT_EXECUTOR_FACTORY( Int )
+   PYROOT_EXECUTOR_FACTORY( UInt )
    PYROOT_EXECUTOR_FACTORY( IntRef )
    PYROOT_EXECUTOR_FACTORY( UIntRef )
    PYROOT_EXECUTOR_FACTORY( ULong )
@@ -817,13 +838,13 @@ namespace {
       NFp_t( "const unsigned char&", &CreateUCharConstRefExecutor     ),
       NFp_t( "short",              &CreateShortExecutor               ),
       NFp_t( "short&",             &CreateShortRefExecutor            ),
-      NFp_t( "unsigned short",     &CreateIntExecutor                 ),
+      NFp_t( "unsigned short",     &CreateUShortExecutor              ),
       NFp_t( "unsigned short&",    &CreateUShortRefExecutor           ),
       NFp_t( "int",                &CreateIntExecutor                 ),
       NFp_t( "int&",               &CreateIntRefExecutor              ),
-      NFp_t( "unsigned int",       &CreateULongExecutor               ),
+      NFp_t( "unsigned int",       &CreateUIntExecutor                ),
       NFp_t( "unsigned int&",      &CreateUIntRefExecutor             ),
-      NFp_t( "UInt_t",  /* enum */ &CreateULongExecutor               ),
+      NFp_t( "UInt_t",  /* enum */ &CreateUIntExecutor                ),
       NFp_t( "UInt_t&", /* enum */ &CreateUIntRefExecutor             ),
       NFp_t( "long",               &CreateLongExecutor                ),
       NFp_t( "long&",              &CreateLongRefExecutor             ),
diff --git a/bindings/pyroot/src/Executors.h b/bindings/pyroot/src/Executors.h
index 1d65d3a..1b07284 100644
--- a/bindings/pyroot/src/Executors.h
+++ b/bindings/pyroot/src/Executors.h
@@ -35,7 +35,9 @@ namespace PyROOT {
    PYROOT_DECLARE_BASIC_EXECUTOR( UChar );
    PYROOT_DECLARE_BASIC_EXECUTOR( UCharConstRef );
    PYROOT_DECLARE_BASIC_EXECUTOR( Short );
+   PYROOT_DECLARE_BASIC_EXECUTOR( UShort );
    PYROOT_DECLARE_BASIC_EXECUTOR( Int );
+   PYROOT_DECLARE_BASIC_EXECUTOR( UInt );
    PYROOT_DECLARE_BASIC_EXECUTOR( Long );
    PYROOT_DECLARE_BASIC_EXECUTOR( ULong );
    PYROOT_DECLARE_BASIC_EXECUTOR( LongLong );
diff --git a/cmake/modules/RootBuildOptions.cmake b/cmake/modules/RootBuildOptions.cmake
index 4a379a9..630ce52 100644
--- a/cmake/modules/RootBuildOptions.cmake
+++ b/cmake/modules/RootBuildOptions.cmake
@@ -189,7 +189,7 @@ if(all)
 endif()
 
 #---VC does not support yet Arm and PPC processors----------------------------------------------
-if (CMAKE_SYSTEM_PROCESSOR STREQUAL "aarch64" OR CMAKE_SYSTEM_PROCESSOR STREQUAL "ppc64le")
+if (CMAKE_SYSTEM_PROCESSOR STREQUAL "aarch64" OR CMAKE_SYSTEM_PROCESSOR STREQUAL "ppc64le" OR CMAKE_SYSTEM_PROCESSOR STREQUAL "ppc64")
    message(STATUS "A system not supported by Vc, ${CMAKE_SYSTEM_PROCESSOR}, was detected. Disabling Vc by default.")
    set(vc_defvalue OFF)
 endif()
diff --git a/cmake/modules/SetUpLinux.cmake b/cmake/modules/SetUpLinux.cmake
index ed468e4..7d2dc7c 100644
--- a/cmake/modules/SetUpLinux.cmake
+++ b/cmake/modules/SetUpLinux.cmake
@@ -42,6 +42,18 @@ elseif(${SYSCTL_OUTPUT} MATCHES ppc64le)
   else()
     message(FATAL_ERROR "There is no Setup for this compiler up to now. Don't know what to do. Stop cmake at this point.")
   endif()
+elseif(${SYSCTL_OUTPUT} MATCHES ppc64)
+  message(STATUS "Found a 64bit ppc64 big endian system")
+  set(SPECIAL_CINT_FLAGS "-DG__64BIT")
+  if(CMAKE_COMPILER_IS_GNUCXX)
+    message(STATUS "Found GNU compiler collection")
+    set(ROOT_ARCHITECTURE linuxppc64gcc)
+  elseif(CMAKE_CXX_COMPILER_ID STREQUAL Clang)
+    message(STATUS "Found CLANG compiler")
+    set(ROOT_ARCHITECTURE linuxppc64gcc)
+  else()
+    message(FATAL_ERROR "There is no Setup for this compiler up to now. Don't know what to do. Stop cmake at this point.")
+  endif()
 else()
   message(STATUS "Found a 32bit system")
   set(BIT_ENVIRONMENT "-m32")
diff --git a/interpreter/llvm/src/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp b/interpreter/llvm/src/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp
index 1470081..6e546ef 100644
--- a/interpreter/llvm/src/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp
+++ b/interpreter/llvm/src/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp
@@ -168,7 +168,6 @@ RuntimeDyldImpl::loadObjectImpl(const object::ObjectFile &Obj) {
     uint32_t Flags = I->getFlags();
 
     bool IsCommon = Flags & SymbolRef::SF_Common;
-    bool IsWeak = Flags & SymbolRef::SF_Weak;
     if (IsCommon) {
       CommonSymbols.push_back(*I);
     } else {
@@ -189,11 +188,6 @@ RuntimeDyldImpl::loadObjectImpl(const object::ObjectFile &Obj) {
           continue;
         StringRef SectionData;
         Check(SI->getContents(SectionData));
-        // TODO: It make make sense to delay emitting the section for weak
-        // symbols until they are actually required, but that's not possible
-        // currently, because we only know whether we will need the symbol
-        // in resolveRelocations, which happens after we have already finalized
-        // the Load.
         bool IsCode = SI->isText();
         unsigned SectionID =
             findOrEmitSection(Obj, *SI, IsCode, LocalSections);
@@ -204,16 +198,7 @@ RuntimeDyldImpl::loadObjectImpl(const object::ObjectFile &Obj) {
         SymbolInfo::Visibility Vis =
           (Flags & SymbolRef::SF_Exported) ?
             SymbolInfo::Default : SymbolInfo::Hidden;
-        if (!IsWeak)
-        {
-          GlobalSymbolTable[Name] = SymbolInfo(SectionID, SectOffset, Vis);
-        } else {
-          if (SymType == object::SymbolRef::ST_Data || !IsCode) {
-            WeakDataSymbolTable[Name] = SymbolInfo(SectionID, SectOffset, Vis);
-          } else {
-            WeakFuncSymbolTable[Name] = SymbolInfo(SectionID, SectOffset, Vis);
-          }
-        }
+        GlobalSymbolTable[Name] = SymbolInfo(SectionID, SectOffset, Vis);
       }
     }
   }
@@ -772,22 +757,6 @@ void RuntimeDyldImpl::resolveExternalSymbols() {
                SymInfo.getOffset();
       }
 
-      // If we didn't find the symbol yet, and it is present in the weak
-      // function symbol table, the definition from this object file needs to be
-      // used, so emit it now
-      if (!Addr) {
-        RTDyldSymbolTable::const_iterator Loc = WeakFuncSymbolTable.find(Name);
-        if (Loc != WeakFuncSymbolTable.end()) {
-          const SymbolInfo& SymInfo = Loc->second;
-          Addr = getSectionLoadAddress(SymInfo.getSectionID());
-          Addr += SymInfo.getOffset();
-          // Since the weak symbol is now, materialized, add it to the
-          // GlobalSymbolTable. If somebody later asks the ExecutionEngine
-          // for the address of this symbol that's where it'll look
-          GlobalSymbolTable[Name] = SymInfo;
-        }
-      }
-
       if (!Addr) {
         // This is an external symbol, try to get its address from
         // MemoryManager.
diff --git a/interpreter/llvm/src/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp b/interpreter/llvm/src/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp
index 9421aea..af9df56 100644
--- a/interpreter/llvm/src/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp
+++ b/interpreter/llvm/src/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp
@@ -947,7 +947,6 @@ relocation_iterator RuntimeDyldELF::processRelocationRef(
       break;
     }
     case SymbolRef::ST_Data:
-    case SymbolRef::ST_Function:
     case SymbolRef::ST_Unknown: {
       Value.SymbolName = TargetName.data();
       Value.Addend = Addend;
# bla bla
