diff --git a/castor/common/CastorConfiguration.cpp b/castor/common/CastorConfiguration.cpp
index 6706580..d9968aa 100644
--- a/castor/common/CastorConfiguration.cpp
+++ b/castor/common/CastorConfiguration.cpp
@@ -53,7 +53,7 @@ castor::common::CastorConfiguration::getConfig(std::string fileName)
     // do we have this configuration already in cache ?
     if (s_castorConfigs.end() == s_castorConfigs.find(fileName)) {
       // no such configuration. Create it
-      s_castorConfigs[fileName] = CastorConfiguration(fileName);
+      s_castorConfigs.insert(std::make_pair(fileName, CastorConfiguration(fileName)));
     }
     // we can now release the lock. Concurrent read only access is ok.
     pthread_mutex_unlock(&s_globalConfigLock);
@@ -80,6 +80,20 @@ castor::common::CastorConfiguration::CastorConfiguration(std::string fileName)
 }
 
 //------------------------------------------------------------------------------
+// copy constructor
+//------------------------------------------------------------------------------
+castor::common::CastorConfiguration::CastorConfiguration(const CastorConfiguration & other)
+  throw (castor::exception::Exception): m_fileName(other.m_fileName), 
+    m_lastUpdateTime(other.m_lastUpdateTime), m_config(other.m_config) {
+  // create a new internal r/w lock
+  int rc = pthread_rwlock_init(&m_lock, NULL);
+  if (0 != rc) {
+    castor::exception::Exception e(rc);
+    throw e;
+  }
+}
+
+//------------------------------------------------------------------------------
 // destructor
 //------------------------------------------------------------------------------
 castor::common::CastorConfiguration::~CastorConfiguration() {
@@ -88,6 +102,23 @@ castor::common::CastorConfiguration::~CastorConfiguration() {
 }
 
 //------------------------------------------------------------------------------
+// assignment operator
+//------------------------------------------------------------------------------
+castor::common::CastorConfiguration & castor::common::CastorConfiguration::operator=(const castor::common::CastorConfiguration & other)
+  throw (castor::exception::Exception) {
+  m_fileName = other.m_fileName;
+  m_lastUpdateTime = other.m_lastUpdateTime;
+  m_config = other.m_config;
+  // create a new internal r/w lock
+  int rc = pthread_rwlock_init(&m_lock, NULL);
+  if (0 != rc) {
+    castor::exception::Exception e(rc);
+    throw e;
+  }
+  return *this;
+}
+
+//------------------------------------------------------------------------------
 // getConfEnt
 //------------------------------------------------------------------------------
 const std::string&
diff --git a/castor/common/CastorConfiguration.hpp b/castor/common/CastorConfiguration.hpp
index 6ea9fbe..be9229c 100644
--- a/castor/common/CastorConfiguration.hpp
+++ b/castor/common/CastorConfiguration.hpp
@@ -67,11 +67,25 @@ namespace castor {
       throw (castor::exception::Exception);
 
       /**
+       * copy constructor
+       * @param other instance of CastorConfiguration class
+       */
+      CastorConfiguration(const CastorConfiguration & other)
+        throw (castor::exception::Exception);
+
+      /**
        * destrcutor
        */
       virtual ~CastorConfiguration();
 
       /**
+       * assignment operator
+       * @ param other instance of CastorConfiguration class
+       */ 
+      CastorConfiguration & operator=(const CastorConfiguration & other)
+        throw (castor::exception::Exception);
+
+      /**
        * retrieves a configuration entry
        * @param category the category of the entry
        * @param key the key of the entry
# bla bla
