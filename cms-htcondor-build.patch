--- a/build/cmake/CondorConfigure.cmake
+++ b/build/cmake/CondorConfigure.cmake
@@ -501,7 +501,7 @@ endif()
 #####################################
 # RPATH option
 if (LINUX AND NOT PROPER)
-	option(CMAKE_SKIP_RPATH "Skip RPATH on executables" OFF)
+	option(CMAKE_SKIP_RPATH "Skip RPATH on executables" ON)
 else()
 	option(CMAKE_SKIP_RPATH "Skip RPATH on executables" ON)
 endif()
@@ -967,7 +967,7 @@ else(MSVC)
 	endif()
 
 	if (LINUX)
-		set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--warn-once -Wl,--warn-common")
+		set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--warn-common")
 		if ( "${LINUX_NAME}" STREQUAL "Ubuntu" )
 			set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--no-as-needed")
 		endif()
--- a/build/cmake/CondorPackageConfig.cmake
+++ b/build/cmake/CondorPackageConfig.cmake
@@ -160,9 +160,9 @@ if ( ${OS_NAME} STREQUAL "LINUX" )
 			set( PYTHON_RPATH "$ORIGIN/../:/lib:/usr/lib:$ORIGIN/../condor" )
 		endif()
 	else()
-		set( CONDOR_RPATH "$ORIGIN/../lib:/lib64:/usr/lib64:$ORIGIN/../lib/condor:/usr/lib64/condor" )
-		set( EXTERNALS_RPATH "$ORIGIN/../lib:/lib64:/usr/lib64:$ORIGIN/../lib/condor:/usr/lib64/condor" )
-		set( PYTHON_RPATH "$ORIGIN/../:/lib64:/usr/lib64:$ORIGIN/../condor" )
+		#set( CONDOR_RPATH "$ORIGIN/../lib:/lib64:/usr/lib64:$ORIGIN/../lib/condor" )
+		#set( EXTERNALS_RPATH "$ORIGIN/../lib:/lib64:/usr/lib64:$ORIGIN/../lib/condor:/usr/lib64/condor" )
+		#set( PYTHON_RPATH "$ORIGIN/../:/lib64:/usr/lib64:$ORIGIN/../condor" )
 	endif()
 elseif( ${OS_NAME} STREQUAL "DARWIN" )
 	set( EXTERNALS_LIB "${C_LIB}/condor" )
--- a/build/cmake/macros/CondorSetLinkLibs.cmake
+++ b/build/cmake/macros/CondorSetLinkLibs.cmake
@@ -32,7 +32,8 @@ if (${_CNDR_TARGET}LinkLibs)
 		if (DARWIN OR AIX OR SOLARIS)
 			target_link_libraries( ${_CNDR_TARGET} ${${_CNDR_TARGET}LinkLibs} ${${_CNDR_TARGET}LinkLibs}  )
 		else()
-	 		target_link_libraries( ${_CNDR_TARGET} -Wl,--start-group ${${_CNDR_TARGET}LinkLibs} -Wl,--end-group -Wl,--enable-new-dtags )
+	 		#target_link_libraries( ${_CNDR_TARGET} -Wl,--start-group ${${_CNDR_TARGET}LinkLibs} -Wl,--end-group -Wl,--enable-new-dtags )
+	 		target_link_libraries( ${_CNDR_TARGET} ${${_CNDR_TARGET}LinkLibs} ${${_CNDR_TARGET}LinkLibs} )
 		endif()
 	 else()
 	 	target_link_libraries( ${_CNDR_TARGET} ${${_CNDR_TARGET}LinkLibs};${CONDOR_WIN_LIBS} )
--- a/externals/bundles/glibc/CMakeLists.txt
+++ b/externals/bundles/glibc/CMakeLists.txt
@@ -31,7 +31,7 @@ if (NOT CLIPPED)
 	# check only the major and minor bits of gcc version.
 	string(SUBSTRING ${CMAKE_C_COMPILER_VERSION} 0 2 GCC_VER_CHECK)
 	# corner off glibc b/c it effect  
-	set(GLIBC_DETECTED ON)
+	#set(GLIBC_DETECTED ON)
         set(GLIBC_BUILD_PREFIX ${CMAKE_CURRENT_BINARY_DIR}/glibc-prefix/src/glibc)
 
 	# By default, we don't need to set any flag environment variables
--- a/src/nordugrid_gahp/CMakeLists.txt
+++ b/src/nordugrid_gahp/CMakeLists.txt
@@ -16,12 +16,7 @@
  # 
  ############################################################### 
 
-if (HAVE_EXT_GLOBUS)
-
-	if (NOT HAVE_LDAP_H OR NOT LDAP_FOUND)
-		message(FATAL_ERROR "Can't find ldap.h, needed to build nordugrid_gahp")
-	endif()
-
+if (HAVE_EXT_GLOBUS AND HAVE_LDAP_H AND LDAP_FOUND )
 	add_definitions(-DLDAP_DEPRECATED)
 
 	condor_glob( HeaderFiles SourceFiles "" )
@@ -52,6 +47,6 @@ if (HAVE_EXT_GLOBUS)
 
 else()
 
-	message( STATUS "NOTE: *nordugrid* targets will not be built HAVE_EXT_GLOBUS=${HAVE_EXT_GLOBUS}" )
+    message( STATUS "NOTE: *nordugrid* targets will not be built HAVE_EXT_GLOBUS=${HAVE_EXT_GLOBUS} HAVE_LDAP_H=${HAVE_LDAP_H}" )
 
 endif ()
--- a/externals/bundles/boost/1.49.0/CMakeLists.txt
+++ b/externals/bundles/boost/1.49.0/CMakeLists.txt
@@ -73,7 +73,7 @@ endif( NOT WINDOWS )
 
 
 # we only use our version of boost if the system is not good enough
-if (NOT PROPER) # AND (NOT Boost_FOUND OR SYSTEM_NOT_UP_TO_SNUFF) )
+if ( (NOT PROPER) AND (NOT Boost_FOUND OR SYSTEM_NOT_UP_TO_SNUFF) )
 
 	if (WINDOWS)
 	  # need to expand the configure and
--- a/externals/bundles/voms/2.0.6/CMakeLists.txt
+++ b/externals/bundles/voms/2.0.6/CMakeLists.txt
@@ -49,8 +49,8 @@
 				touch -r src/utils/vomsfake.y src/utils/vomsparser.h &&
 				touch -r src/utils/vomsfake.y src/utils/vomsparser.c &&
 				touch -r src/utils/vomsfake.y src/utils/lex.yy.c &&
-				patch -N -p1 < ${CMAKE_CURRENT_SOURCE_DIR}/globus_thread_h.patch &&
-				./autogen.sh )
+				patch -N -p1 < ${CMAKE_CURRENT_SOURCE_DIR}/globus_thread_h.patch
+				)
 			set ( VOMS_GLOBUS_FLAG --with-globus-prefix=${GLOBUS_INSTALL_LOC} )
 		ENDIF()
 
--- a/src/condor_io/authentication.cpp
+++ b/src/condor_io/authentication.cpp
@@ -986,7 +986,11 @@
         dprintf (D_SECURITY, "HANDSHAKE: handshake() - i am the client\n");
         mySock->encode();
 		int method_bitmask = SecMan::getAuthBitmask(my_methods.Value());
+#if defined(HAVE_EXT_KRB5)
 		if ( (method_bitmask & CAUTH_KERBEROS) && Condor_Auth_Kerberos::Initialize() == false ) {
+#else
+		if (method_bitmask & CAUTH_KERBEROS) {
+#endif
 			dprintf (D_SECURITY, "HANDSHAKE: excluding KERBEROS: %s\n", "Initialization failed");
 			method_bitmask &= ~CAUTH_KERBEROS;
 		}
@@ -1036,7 +1040,11 @@
 	dprintf ( D_SECURITY, "HANDSHAKE: client sent (methods == %i)\n", client_methods);
 
 	shouldUseMethod = selectAuthenticationType( my_methods, client_methods );
+#if defined(HAVE_EXT_KRB5)
 	if ( (shouldUseMethod & CAUTH_KERBEROS) && Condor_Auth_Kerberos::Initialize() == false ) {
+#else
+	if (shouldUseMethod & CAUTH_KERBEROS) {
+#endif
 		dprintf (D_SECURITY, "HANDSHAKE: excluding KERBEROS: %s\n", "Initialization failed");
 		shouldUseMethod &= ~CAUTH_KERBEROS;
 	}
--- a/src/condor_io/condor_auth_ssl.cpp
+++ b/src/condor_io/condor_auth_ssl.cpp
@@ -94,8 +94,12 @@
 
 	dlerror();
 
+#if defined(HAVE_EXT_KRB5)
 	if ( Condor_Auth_Kerberos::Initialize() == false ||
 		 (dl_hdl = dlopen(LIBSSL_SO, RTLD_LAZY)) == NULL ||
+#else
+	if ( (dl_hdl = dlopen(LIBSSL_SO, RTLD_LAZY)) == NULL ||
+#endif
 		 !(SSL_CTX_ctrl_ptr = (long (*)(SSL_CTX *, int, long, void *))dlsym(dl_hdl, "SSL_CTX_ctrl")) ||
 		 !(SSL_CTX_free_ptr = (void (*)(SSL_CTX *))dlsym(dl_hdl, "SSL_CTX_free")) ||
 		 !(SSL_CTX_load_verify_locations_ptr = (int (*)(SSL_CTX *, const char *, const char *))dlsym(dl_hdl, "SSL_CTX_load_verify_locations")) ||
