diff --git apps/couch/src/couch_changes.erl apps/couch/src/couch_changes.erl
index 4f2857b..b840262 100644
--- apps/couch/src/couch_changes.erl
+++ apps/couch/src/couch_changes.erl
@@ -27,6 +27,14 @@ handle_changes(#changes_args{style=Style}=Args1, Req, Db) ->
     fwd ->
         Args#changes_args.since
     end,
+    % begin timer to deal with heartbeat when filter function fails
+    case Args#changes_args.heartbeat of
+        undefined ->
+            erlang:erase(last_changes_heartbeat);
+        Val when is_integer(Val); Val =:= true ->
+            put(last_changes_heartbeat, now())
+    end,
+
     if Feed == "continuous" orelse Feed == "longpoll" ->
         fun(CallbackAcc) ->
             {Callback, UserAcc} = get_callback_acc(CallbackAcc),
@@ -60,14 +68,17 @@ handle_changes(#changes_args{style=Style}=Args1, Req, Db) ->
         fun(CallbackAcc) ->
             {Callback, UserAcc} = get_callback_acc(CallbackAcc),
             UserAcc2 = start_sending_changes(Callback, UserAcc, Feed),
-            {ok, {_, LastSeq, _Prepend, _, _, UserAcc3, _, _, _, _}} =
+            {Timeout, TimeoutFun} = get_changes_timeout(Args, Callback),
+            {ok, {_, LastSeq, _Prepend, _, _, UserAcc3, _, _, _, _, _, _}} =
                 send_changes(
                     Args#changes_args{feed="normal"},
                     Callback,
                     UserAcc2,
                     Db,
                     StartSeq,
-                    <<>>
+                    <<>>,
+                    Timeout,
+                    TimeoutFun
                 ),
             end_sending_changes(Callback, UserAcc3, LastSeq, Feed)
         end
@@ -266,7 +277,7 @@ start_sending_changes(_Callback, UserAcc, "continuous") ->
 start_sending_changes(Callback, UserAcc, ResponseType) ->
     Callback(start, ResponseType, UserAcc).

-send_changes(Args, Callback, UserAcc, Db, StartSeq, Prepend) ->
+send_changes(Args, Callback, UserAcc, Db, StartSeq, Prepend, Timeout, TimeoutFun) ->
     #changes_args{
         include_docs = IncludeDocs,
         conflicts = Conflicts,
@@ -281,7 +292,7 @@ send_changes(Args, Callback, UserAcc, Db, StartSeq, Prepend) ->
         fun changes_enumerator/2,
         [{dir, Dir}],
         {Db, StartSeq, Prepend, FilterFun, Callback, UserAcc, ResponseType,
-            Limit, IncludeDocs, Conflicts}
+            Limit, IncludeDocs, Conflicts, Timeout, TimeoutFun}
     ).

 keep_sending_changes(Args, Callback, UserAcc, Db, StartSeq, Prepend, Timeout,
@@ -292,8 +303,8 @@ keep_sending_changes(Args, Callback, UserAcc, Db, StartSeq, Prepend, Timeout,
         db_open_options = DbOptions
     } = Args,
     % ?LOG_INFO("send_changes start ~p",[StartSeq]),
-    {ok, {_, EndSeq, Prepend2, _, _, UserAcc2, _, NewLimit, _, _}} = send_changes(
-        Args#changes_args{dir=fwd}, Callback, UserAcc, Db, StartSeq, Prepend
+    {ok, {_, EndSeq, Prepend2, _, _, UserAcc2, _, NewLimit, _, _, _, _}} = send_changes(
+        Args#changes_args{dir=fwd}, Callback, UserAcc, Db, StartSeq, Prepend, Timeout, TimeoutFun
     ),
     % ?LOG_INFO("send_changes last ~p",[EndSeq]),
     couch_db:close(Db),
@@ -301,7 +312,7 @@ keep_sending_changes(Args, Callback, UserAcc, Db, StartSeq, Prepend, Timeout,
         end_sending_changes(Callback, UserAcc2, EndSeq, ResponseType);
     true ->
         case wait_db_updated(Timeout, TimeoutFun, UserAcc2) of
-        {updated, UserAcc3} ->
+        {updated, UserAcc4} ->
             % ?LOG_INFO("wait_db_updated updated ~p",[{Db#db.name, EndSeq}]),
             DbOptions1 = [{user_ctx, Db#db.user_ctx} | DbOptions],
             case couch_db:open(Db#db.name, DbOptions1) of
@@ -309,7 +320,7 @@ keep_sending_changes(Args, Callback, UserAcc, Db, StartSeq, Prepend, Timeout,
                 keep_sending_changes(
                     Args#changes_args{limit=NewLimit},
                     Callback,
-                    UserAcc3,
+                    UserAcc4,
                     Db2,
                     EndSeq,
                     Prepend2,
@@ -319,17 +330,17 @@ keep_sending_changes(Args, Callback, UserAcc, Db, StartSeq, Prepend, Timeout,
             _Else ->
                 end_sending_changes(Callback, UserAcc2, EndSeq, ResponseType)
             end;
-        {stop, UserAcc3} ->
+        {stop, UserAcc4} ->
             % ?LOG_INFO("wait_db_updated stop ~p",[{Db#db.name, EndSeq}]),
-            end_sending_changes(Callback, UserAcc3, EndSeq, ResponseType)
+            end_sending_changes(Callback, UserAcc4, EndSeq, ResponseType)
         end
     end.

 end_sending_changes(Callback, UserAcc, EndSeq, ResponseType) ->
     Callback({stop, EndSeq}, ResponseType, UserAcc).

-changes_enumerator(DocInfo, {Db, _, _, FilterFun, Callback, UserAcc,
-    "continuous", Limit, IncludeDocs, Conflicts}) ->
+changes_enumerator(DocInfo, {Db, _, Prepend, FilterFun, Callback, UserAcc,
+    "continuous", Limit, IncludeDocs, Conflicts, Timeout, TimeoutFun}) ->

     #doc_info{high_seq = Seq} = DocInfo,
     Results0 = FilterFun(Db, DocInfo),
@@ -337,18 +348,25 @@ changes_enumerator(DocInfo, {Db, _, _, FilterFun, Callback, UserAcc,
     Go = if Limit =< 1 -> stop; true -> ok end,
     case Results of
     [] ->
-        {Go, {Db, Seq, nil, FilterFun, Callback, UserAcc, "continuous", Limit,
-                IncludeDocs, Conflicts}
-        };
+        {Done, UserAcc2} = maybe_heartbeat(Timeout, TimeoutFun, UserAcc),
+        case Done of
+        stop ->
+            { stop,  {Db, Seq, Prepend, FilterFun, Callback, UserAcc2, "continuous",
+                     Limit, IncludeDocs, Conflicts, Timeout, TimeoutFun}};
+        ok ->
+            { Go,  {Db, Seq, Prepend, FilterFun, Callback, UserAcc2, "continuous",
+                     Limit, IncludeDocs, Conflicts, Timeout, TimeoutFun}}
+        end;
     _ ->
         ChangesRow = changes_row(Db, Results, DocInfo, IncludeDocs, Conflicts),
         UserAcc2 = Callback({change, ChangesRow, <<>>}, "continuous", UserAcc),
-        {Go, {Db, Seq, nil, FilterFun, Callback, UserAcc2, "continuous",
-                Limit - 1, IncludeDocs, Conflicts}
+        reset_heartbeat(),
+        {Go, {Db, Seq, Prepend, FilterFun, Callback, UserAcc2, "continuous",
+                Limit - 1, IncludeDocs, Conflicts, Timeout, TimeoutFun}
         }
     end;
 changes_enumerator(DocInfo, {Db, _, Prepend, FilterFun, Callback, UserAcc,
-    ResponseType, Limit, IncludeDocs, Conflicts}) ->
+    ResponseType, Limit, IncludeDocs, Conflicts, Timeout, TimeoutFun}) ->

     #doc_info{high_seq = Seq} = DocInfo,
     Results0 = FilterFun(Db, DocInfo),
@@ -356,15 +374,21 @@ changes_enumerator(DocInfo, {Db, _, Prepend, FilterFun, Callback, UserAcc,
     Go = if (Limit =< 1) andalso Results =/= [] -> stop; true -> ok end,
     case Results of
     [] ->
-        {Go, {Db, Seq, Prepend, FilterFun, Callback, UserAcc, ResponseType,
-                Limit, IncludeDocs, Conflicts}
-        };
+        {Done, UserAcc2} = maybe_heartbeat(Timeout, TimeoutFun, UserAcc),
+        case Done of
+        stop ->
+            {stop, {Db, Seq, Prepend, FilterFun, Callback, UserAcc2, ResponseType,
+                    Limit, IncludeDocs, Conflicts}};
+        ok ->
+            {Go, {Db, Seq, Prepend, FilterFun, Callback, UserAcc2, ResponseType,
+                    Limit, IncludeDocs, Conflicts, Timeout, TimeoutFun}}
+        end;
     _ ->
         ChangesRow = changes_row(Db, Results, DocInfo, IncludeDocs, Conflicts),
         UserAcc2 = Callback({change, ChangesRow, Prepend}, ResponseType, UserAcc),
+        reset_heartbeat(),
         {Go, {Db, Seq, <<",\n">>, FilterFun, Callback, UserAcc2, ResponseType,
-                Limit - 1, IncludeDocs, Conflicts}
-        }
+                Limit - 1, IncludeDocs, Conflicts, Timeout, TimeoutFun}}
     end.


@@ -411,3 +435,28 @@ get_rest_db_updated() ->
     receive db_updated -> get_rest_db_updated()
     after 0 -> updated
     end.
+
+reset_heartbeat() ->
+    case get(last_changes_heartbeat) of
+    undefined ->
+        ok;
+    _ ->
+        put(last_changes_heartbeat, now())
+    end.
+
+maybe_heartbeat(Timeout, TimeoutFun, Acc) ->
+    Now = now(),
+    Before = get(last_changes_heartbeat),
+    case Before of
+    undefined ->
+        {ok, Acc};
+    _ ->
+        case timer:now_diff(Now, Before) div 1000 >= Timeout of
+        true ->
+            Acc2 = TimeoutFun(Acc),
+            put(last_changes_heartbeat, Now),
+            Acc2;
+        false ->
+            {ok, Acc}
+        end
+    end.
diff --git apps/couch/src/couch_rep.erl apps/couch/src/couch_rep.erl
index 82b69bc..11dfa02 100644
--- apps/couch/src/couch_rep.erl
+++ apps/couch/src/couch_rep.erl
@@ -527,34 +527,7 @@ filter_code(Filter, Props, UserCtx) ->
     _ ->
         throw({error, <<"Invalid filter. Must match `ddocname/filtername`.">>})
     end,
-    ProxyParams = parse_proxy_params(
-        couch_util:get_value(<<"proxy">>, Props, [])),
-    DbName = couch_util:get_value(<<"source">>, Props),
-    Source = try
-        open_db(DbName, UserCtx, ProxyParams)
-    catch
-    _Tag:DbError ->
-        DbErrorMsg = io_lib:format("Could not open source database `~s`: ~s",
-           [couch_util:url_strip_password(DbName), couch_util:to_binary(DbError)]),
-        throw({error, iolist_to_binary(DbErrorMsg)})
-    end,
-    try
-        Body = case (catch open_doc(Source, <<"_design/", DDocName/binary>>)) of
-        {ok, #doc{body = Body0}} ->
-            Body0;
-        DocError ->
-            DocErrorMsg = io_lib:format(
-                "Couldn't open document `_design/~s` from source "
-                "database `~s`: ~s",
-                [DDocName, dbname(Source), couch_util:to_binary(DocError)]),
-            throw({error, iolist_to_binary(DocErrorMsg)})
-        end,
-        Code = couch_util:get_nested_json_value(
-            Body, [<<"filters">>, FilterName]),
-        re:replace(Code, "^\s*(.*?)\s*$", "\\1", [{return, binary}])
-    after
-        close_db(Source)
-    end.
+    Filter.

 maybe_add_trailing_slash(Url) ->
     re:replace(Url, "[^/]$", "&/", [{return, list}]).
diff --git apps/couch/src/couch_rep_changes_feed.erl apps/couch/src/couch_rep_changes_feed.erl
index 651069f..3bf713c 100644
--- apps/couch/src/couch_rep_changes_feed.erl
+++ apps/couch/src/couch_rep_changes_feed.erl
@@ -268,7 +268,7 @@ handle_info({ibrowse_async_response, Id, Chunk}, #state{reqid=Id}=State) ->
     handle_messages(Messages, State);

 handle_info({ibrowse_async_response_end, Id}, #state{reqid=Id} = State) ->
-    handle_feed_completion(State);
+    handle_retry(State);

 handle_info({'EXIT', From, normal}, #state{changes_loop=From} = State) ->
     handle_feed_completion(State);
