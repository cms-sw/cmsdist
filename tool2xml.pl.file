#!/usr/bin/env perl

my $file=shift;
if(!$file || (!-f "$file")){die "ERROR: No such file: \"$file\"";}
my $infile;
my $datacache={};
$datacache->{orderedattrib}=[];
foreach my $x ("lib","use","flags","runtime","classpath","productstore","select","include"){$datacache->{opentags}{$x}=1;}
foreach my $x ("name","version","default","value"){push @{$datacache->{orderedattrib}},$x;}
foreach my $x ("include","select","tool","info","lib","client","flags","runtime","use"){push @{$datacache->{orderedtag}},$x;}
my $attribkey="tool2xml_attrib_key";
my $pcdatakey="tool2xml_pcdata_key";

my $cache={};
open ($infile,$file) || die "ERROR: Could not open file \"$file\" for reading.";
&parseFile($infile,$cache);
close($infile);
&dumpXML($cache);
exit 0;

sub dumpXML ()
{
  my $cache=shift;
  dumpXMLHead();
  dumpXMLBody($cache, "  ");
  dumpXMLTail();
}

sub dumpXMLBody ()
{
  my $cache=shift;
  my $tab=shift || "";
  foreach my $tag (@{$datacache->{orderedtag}},keys %$cache)
  {
    if(exists $cache->{$tag})
    {
      my $c=$cache->{$tag}; my $ref=ref($c);
      if($ref eq "ARRAY"){&dumyXMLItem($c,$tag,$tab);}
      delete $cache->{$tag};
    }
  }
}

sub dumyXMLItem ()
{
  my $cache=shift;
  my $tag=shift;
  my $tab=shift;
  foreach my $x (@$cache)
  {
    print "$tab<$tag";
    if(exists $x->{$attribkey})
    {
      foreach my $orderkey (@{$datacache->{orderedattrib}})
      {
	if(exists $x->{$attribkey}{$orderkey})
	{print " $orderkey=\"".$x->{$attribkey}{$orderkey}."\"";delete $x->{$attribkey}{$orderkey};}
      }
      foreach my $attrib (keys %{$x->{$attribkey}})
      {print " $attrib=\"".$x->{$attribkey}{$attrib}."\"";}
      delete $x->{$attribkey};
    }
    my $hassubkeys=scalar(keys %$x);
    if($hassubkeys == 0){print "/>\n";}
    else
    {
      print ">\n";
      if(exists $x->{$pcdatakey})
      {
	foreach my $l (@{$x->{$pcdatakey}}){print "$l\n";}
	delete $x->{$pcdatakey};
      }
    }
    &dumpXMLBody($x,"$tab  ");
    if($hassubkeys > 0){print "$tab</$tag>\n";}
  }
}

sub dumpXMLHead ()
{
}

sub dumpXMLTail ()
{
}

sub parseFile ()
{
  my $file=shift;
  my $c=shift;
  my $line=shift || "";
  my $intag=shift || "";
  my $readline=1;
  while(($line && ($readline=1)) || (($line=<$file>) && ($readline=2)))
  {
    if($readline==2)
    {
      chomp $line;
      if($line=~/^\s*#/){$line="";next;}
    }
    #print "LINE:$line\n";
    if($line=~/^\s*<\s*\/([^\s]+?)\s*>(.*)/)
    {
      my $rtag=lc($1);
      $line=$2;
      if($rtag eq "doc"){next;}
      if(exists $datacache->{opentags}{$rtag}){next;}
      if($rtag ne $intag){die "ERROR: Wrong closing tag. Found \"$rtag\" expacted \"$intag\".\n";}
      else{return $line;}
    }
    elsif($intag eq "makefile")
    {
      if(!exists $c->{$pcdatakey}){$c->{$pcdatakey}=[];}
      push @{$c->{$pcdatakey}},$line;
      $line="";
    }
    elsif($line=~/^\s*<\s*([^\s]+)\s+(.+?)>(.*)/)
    {
      my $rtag=lc($1);
      my $attrib=$2;
      $line=$3;
      if($rtag eq "doc"){next;}
      $attrib=~s/^\s*//;$attrib=~s/\s*$//;
      if(!exists $c->{$rtag}){$c->{$rtag}=[];}
      my $index=scalar(@{$c->{$rtag}});
      $c->{$rtag}[$index]={};
      &addAttrib($attrib,$c->{$rtag}[$index],$rtag);
      if(exists $datacache->{opentags}{$rtag}){next;}
      if($attrib!~/[\'\"]\s*\/$/){$line=&parseFile($file,$c->{$rtag}[$index],$line,$rtag);}
    }
    elsif($line=~/^\s*<\s*([^\s>]+)\s*>(.*)/)
    {
      $line=$3;
      my $rtag=lc($1);
      if(!exists $c->{$rtag}){$c->{$rtag}=[];}
      my $index=scalar(@{$c->{$rtag}});
      $c->{$rtag}[$index]={};
      $line=&parseFile($file,$c->{$rtag}[$index],$line,$rtag);
    }
    elsif($line=~/^(.*?)(<.*)/)
    {
     my $cdata=$1; $line=$2;
     if(!exists $c->{$pcdatakey}){$c->{$pcdatakey}=[];}
     push @{$c->{$pcdatakey}},$cdata;
    }
    elsif($intag ne "")
    {
      if(!exists $c->{$pcdatakey}){$c->{$pcdatakey}=[];}
      push @{$c->{$pcdatakey}},$line;
      $line="";
    }
    else{$line="";}
  }
}

sub addAttrib ()
{
  my $oline=shift;
  my $c=shift;
  my $tag=shift;
  $oline=~s/([\'\"])\s*\/$/$1/;
  my $line=$oline;
  while($line)
  {
    if($line=~/^\s*([^\=]+?)\=\s*(.*)/)
    {
      $line=$2;
      my $attrib=$1;
      my $value="";
      $attrib=~s/\s*$//;
      if($line=~/^([\'\"])(.+)/)
      {
        my $q=$1; $line=$2;
	if($line=~/(.*?)$q(.*)/){$line=$2;$value=$1;}
	else{die "ERROR: Missing ($q) AT line\n$oline\n";}
      }
      elsif($line=~/([^\s]+)\s*(.*)/)
      {
        $value=$1; $line=$2;
	if($value=~/([\'\"])$/){die "ERROR: Missing ($1) AT line\n$oline\n";}
      }
      $attrib=lc($attrib);
      $c->{$attribkey}{$attrib}=$value;
      #print "ADDED:$attrib=$value\n"; 
    }
    elsif($line=~/^\s*$/){next;}
    else{die "ERROR: Wrong line:\n$oline\n";}
  }
}
# bla bla
