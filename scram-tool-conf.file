### FILE scram-tool-conf
## NOCOMPILER
## NO_AUTO_RUNPATH
## NO_AUTO_DEPENDENCY
## INCLUDE toolflags

BuildRequires: SCRAMV1
Source99: scram-tools
Source: none
%{expand:%(i=90; for v in %{package_vectorization}; do let i=$i+1 ; echo Source${i}: vectorization/$v; done)}

%if "%{?vectorized_packages:set}" != "set"
%define vectorized_packages %{nil}
%endif

%prep
%build

#   requiredtools	Tools for which we need to collect the SCRAMToolBox toolfiles
#                  	(This is automatically set by install.sh script)
#   skipreqtools	Do not add these tools in selected directory

%install
rm -rf %i
mkdir -p %{i}/tools/selected %{i}/tools/available

%if "%{?skipreqtools:set}" != "set"
%define skipreqtools %{nil}
%endif

## INCLUDE scram-tools.file/tool-env

for tool in %requiredtools; do
  echo ">> Copying tool files from: $tool"
  uctool=`echo $tool | tr '[a-z-]' '[A-Z_]'`
  toolbase=`eval echo \\$${uctool}_ROOT`
  toolver=`eval echo \\$${uctool}_VERSION`
  %{_sourcedir}/scram-tools/bin/get_tools "$toolbase" "$toolver" %i "${tool}"
done
%{_sourcedir}/scram-tools/bin/get_tools "" "system" %i "systemtools"

for vec in %{package_vectorization}; do \
  ucvec=`echo $vec | tr '[a-z-]' '[A-Z_]'`
  for tool in %{vectorized_packages}; do \
    uctool=`echo $tool | tr '[a-z-]' '[A-Z_]'`
    toolbase=`eval echo \\$${uctool}_${ucvec}_ROOT`
    toolver=`eval echo \\$${uctool}_${ucvec}_VERSION`
    %{_sourcedir}/scram-tools/bin/get_vectorized_tools "$toolbase" "$toolver" %i "${tool}" "${vec}"
  done
  if [ -f %i/tools/selected/gcc-cxxcompiler.xml ] ; then
    f=$(%{cmsdist_directory}/vectorization/cmsdist_packages.py $vec)
    sed -i -e "s#</tool>#    <flags CXXFLAGS_TARGETS_${ucvec}=\"${f}\"/>\n</tool>#" %i/tools/selected/gcc-cxxcompiler.xml
  fi
done

for stool in $(echo %skipreqtools | tr '[A-Z]' '[a-z]') ; do
  [ -f %i/tools/selected/${stool}.xml ] || continue
  mv %i/tools/selected/${stool}.xml %i/tools/available
done
  
if [ -e $SCRAMV1_ROOT/bin/chktool ] ; then
  touch %i/errors.log
  find %i/tools -name '*.xml' -type f | (xargs $SCRAMV1_ROOT/bin/chktool >> %i/errors.log 2>&1 || true)
  if [ $(grep 'ERROR:' %i/errors.log | wc -l) -gt 0 ] ; then
    cat %i/errors.log
    exit 1
  fi
  rm -f %i/errors.log
fi

echo '<tool name="python-paths" version="1.0">' > %{i}/tools/selected/python-paths.xml
if [ "${PYTHON27PATH}" != "" ] ; then
  py27List=`echo ${PYTHON27PATH} | tr ':' '\n'`
  mkdir -p %{i}/${PYTHON_LIB_SITE_PACKAGES}
  touch %{i}/${PYTHON_LIB_SITE_PACKAGES}/tool-deps.pth
  for pkg in ${py27List} ; do
     echo "adding $pkg"
     echo "$pkg" >> %{i}/${PYTHON_LIB_SITE_PACKAGES}/tool-deps.pth
  done
  echo '  <runtime name="PYTHON27PATH"  value="%{i}/'${PYTHON_LIB_SITE_PACKAGES}'" type="path"/>' >> %{i}/tools/selected/python-paths.xml
fi

if [ "${PYTHON3PATH}" != "" ] ; then
  py3List=`echo ${PYTHON3PATH} | tr ':' '\n'`
  mkdir -p %{i}/${PYTHON3_LIB_SITE_PACKAGES}
  touch %{i}/${PYTHON3_LIB_SITE_PACKAGES}/tool-deps.pth
  for pkg in ${py3List} ; do
     echo "adding $pkg"
     echo "$pkg" >> %{i}/${PYTHON3_LIB_SITE_PACKAGES}/tool-deps.pth
  done
  echo '  <runtime name="PYTHON3PATH"  value="%{i}/'${PYTHON3_LIB_SITE_PACKAGES}'" type="path"/>' >> %{i}/tools/selected/python-paths.xml
fi

echo '</tool>' >> %{i}/tools/selected/python-paths.xml

ALL_PY_BIN=""
ALL_PY_BIN_PKGS=""
for pkg in  $(echo %{allpkgreqs} | tr ' ' '\n' | grep '/py[23]-') ; do
  pk_name=$(echo $pkg | cut -d/ -f2 | tr '[A-Z]' '[a-z]')
  if [ -f %{i}/tools/selected/${pk_name}.xml ] ; then continue ; fi
  pk_ver=$(echo $pkg | cut -d/ -f3)
  uctool=`echo ${pk_name} | tr '[a-z-]' '[A-Z_]'`
  echo "<tool name=\"$pk_name\" version=\"$pk_ver\">" > %{i}/tools/selected/${pk_name}.xml
  if [ -e %{cmsroot}/%{cmsplatf}/$pkg/bin ] ; then
    for b in $(ls %{cmsroot}/%{cmsplatf}/$pkg/bin) ; do
      ALL_PY_BIN="${ALL_PY_BIN} ${b}"
      ALL_PY_BIN_PKGS="${ALL_PY_BIN_PKGS} ${b}:${pk_name}"
    done
    echo "  <client>" >> %{i}/tools/selected/${pk_name}.xml
    echo "    <environment name=\"${uctool}_BASE\" default=\"%{cmsroot}/%{cmsplatf}/$pkg\"/>" >> %{i}/tools/selected/${pk_name}.xml
    echo "  </client>" >> %{i}/tools/selected/${pk_name}.xml
    echo "  <runtime name=\"PATH\" value=\"\$${uctool}_BASE/bin\" type=\"path\"/>" >> %{i}/tools/selected/${pk_name}.xml
  fi
  echo "</tool>" >> %{i}/tools/selected/${pk_name}.xml
done
DUP_BIN=$(echo "${ALL_PY_BIN}" | tr ' ' '\n' | grep -v '__pycache__' | sort | uniq -c | sed 's|^\s*||' | grep -v '^1 ' | sed 's|^.* ||')

set +x
if [ "${DUP_BIN}" != "" ] ; then
  for p in ${DUP_BIN} ; do
    echo ${ALL_PY_BIN_PKGS} | tr ' ' '\n' | grep "^${p}:"
  done
  echo "ERROR: Duplicate python binaries found. Please cleanup and make sure only one binary is available."
  exit 1
fi
set -x
if [ -e %{i}/tools/selected/cuda-gcc-support.xml ] ; then
  if [ "%{cuda_gcc_support}" != "true" ] ; then
    rm -f %{i}/tools/selected/cuda-gcc-support.xml
    echo "WARNING: CUDA does not support this GCC version, removing cuda-gcc-support.xml tool file"
  fi
fi
[ -d %{i}/tools/selected ] && chmod a+r -R %{i}/tools/selected
[ -d %{i}/tools/available  ] && chmod a+r -R %i/tools/available

%post

%{relocateCmsFiles} $(find $RPM_INSTALL_PREFIX/%{pkgrel}/tools -type f)
%{relocateCmsFiles} $(find $RPM_INSTALL_PREFIX/%{pkgrel}/lib -type f)
